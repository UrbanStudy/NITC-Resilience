---
title: "Skim Matrix"
date: "`r Sys.Date()`"
categories: ["R"]
tags: ["R Markdown", "Dodgr", "sf"]
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,sf,mapview, osmdata, dodgr, bench,igraph) # crsuggest,
# remotes::install_github('ropensci/osmdata')
# devtools::install_github ("ropensci/osmplotr")

# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")

# devtools::install_github("ropensci/stplanr")
options(scipen=10)
options(digits=6)
# packageVersion ("dodgr")
```


<!-- #  {.tabset .tabset-fade .tabset-pills} -->



Import and deal with the network.

```{r,eval=F}

# bb.multnomah <- osmdata::getbb ("multnomah or")
# bb.washington <- osmdata::getbb ("washington or")
# bb.clackamas <- osmdata::getbb ("clackamas or")
# class(bb.portland)
# sp::bbox(pdx_bg)
# class(pdx_bg)
# net <- dodgr_streetnet (c("multnomah or", "washington or", "clackamas or"))
# net <- dodgr_streetnet (bb.pdx)
# dodgr_save_streetnet(net, "~/urbanstudy/NITC-Resilience/content/osm/pdxstreetnet.Rds")
# net <- dodgr_load_streetnet ("pdxstreetnet.Rds")

# net <- dodgr_streetnet ("portland or")
# saveRDS(net, "~/urbanstudy/NITC-Resilience/content/osm/pdxstreetnet.Rds")

# Select 3 columns and 8 types of highway.
# pdx.net <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdxstreetnet.Rds")
pdx3cnet <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.Rds")
# table(pdx.net$highway)
# weight.name <- c("construction", "proposed", "crossing", "abandoned") #"raceway", "platform", "corridor", , "elevator"
# pdx.net.main<- pdx.net[which(pdx.net$highway%in% c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")),]
# pdx.net.main <- pdx.net.main %>% select(osm_id, highway, geometry)
# saveRDS(pdx.net.main, "~/urbanstudy/NITC-Resilience/content/osm/pdxnetmain.Rds")

pdx3cnet.main<- pdx3cnet[which(pdx3cnet$highway%in% c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")),] # ,"unclassified", "residential"
pdx3cnet.main <- pdx3cnet.main %>% select(osm_id, highway, geometry)
saveRDS(pdx3cnet.main, "~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")

# Weighted network by "motorcar" include from, to, distance, and time.
net3c.main <- weight_streetnet (pdx3cnet.main, wt_profile ="motorcar") #

# table(pdx.net$highway)
# table (net.main$component)
# length (unique (net$component))

# Graph Contraction: Simplify the network
net3c.main <- net3c.main[net3c.main$component == 1, ]
net3cc.main <- dodgr_contract_graph (net3c.main)
nrow (net3c.main); nrow (net3cc.main); nrow (net3cc.main) / nrow (net3c.main)
saveRDS(net3cc.main, "~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
# head(net.motorway); head(netc.motorway)
# rm(net)

# mapview(pdx.net.main)
# library (osmplotr)
# library (magrittr)
# map <- osm_basemap (osmdata::getbb ("portland or"), bg = "gray95") %>%
#     # add_osm_objects (pdx_bg, col = "gray5") %>%
#     add_osm_objects (net3cc.main, col = "gray5") %>%
#     add_axes () %>%
#     print_osm_map ()
```


Import Census Tracts.

```{r}
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
  mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>% 
  select(-INTPTLAT,-INTPTLON)
# pdx.bg <- st_centroid(pdx_bg)
# mapview(pdx_bg)
od.all <- pdx_df  %>% select(-GEOID)
```





Calculate all network distance

```{r}
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
odd.matrix[1:10,1:10]
class(odd.matrix)
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
  pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
head(od.table)
# mean(d.c.m.all[upper.tri(d.c.m.all)])
# od.table1 <- stplanr::odmatrix_to_od(d.c.m.all) 
# head(od.table1)
```

```{r}
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
# mapview(pdx_bg)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>% 
  mapview(z="dist") + mapview(pdx3cnet.main) 

pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>% 
  mapview(z="dist")
```



```{r, eval=F}
v.od <- match_points_to_graph (v, od.all, connected = TRUE)
vc.od <- match_points_to_graph (vc, od.all, connected = TRUE)
vm.od <- match_points_to_graph (vm, od.all, connected = TRUE)
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
# match block group points to vertex
d.all.match <- dodgr_dists (net, from = v.od, to = v.od)
d.c.all.match <- dodgr_dists (netc, from = vc.od, to = vc.od)
d.m.all.match <- dodgr_dists (net.main, from = vm.od, to = vm.od)
d.c.m.all.match <- dodgr_dists (netc.main, from = vcm.od, to = vcm.od)
# all distance
from <- match_points_to_graph (v, od, connected = TRUE)
fromc <- match_points_to_graph (vc, od, connected = TRUE)
fromm <- match_points_to_graph (vm, od, connected = TRUE)
fromcm <- match_points_to_graph (vcm, od, connected = TRUE)
# select the three points
d.all.match[v$id[from],v$id[from]]
d.c.all.match[vc$id[fromc],vc$id[fromc]]
d.m.all.match[vm$id[fromm],vm$id[fromm]]
d.c.m.all.match[vcm$id[fromcm],vcm$id[fromcm]]
# distances among the three points
sum(is.na.data.frame(d.all.match))
sum(is.na.data.frame(d.c.all.match))
sum(is.na.data.frame(d.m.all.match))
sum(is.na.data.frame(d.c.m.all.match))
# main roads have no NA
mean(d.all.match[upper.tri(d.all.match)],na.rm = T)
mean(d.c.all.match[upper.tri(d.c.all.match)],na.rm = T)
mean(d.m.all.match[upper.tri(d.m.all.match)])
mean(d.c.m.all.match[upper.tri(d.c.m.all.match)])
# The total distances are the same

# d.all.igr <- distances (igrcm, v = v.od[1], to = v.od[-1]) 
# Duplicate vertices in `to', this is not allowed
```


