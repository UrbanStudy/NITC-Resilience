---
title: "6 Shortest Distance"
date: "`r Sys.Date()`"
categories: ["R"]
tags: ["R Markdown", "sfnetworks", "sf"]
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,sf,sfnetworks, tidygraph, TSP, mapview, osmdata,dbscan,igraph) # crsuggest,dodgr, bench, stplanr, tmap, osrm,pct
# remotes::install_github('ropensci/osmdata')
# devtools::install_github ("ropensci/osmplotr")

# remotes::install_github("luukvdmeer/sfnetworks")

options(scipen=10)
options(digits=6)
# packageVersion ("dodgr")
```

# 4. Routing

https://luukvdmeer.github.io/sfnetworks/articles/sfn04_routing.html

- If there is a column in the edges table named weight, the values in this column are automatically used as edge weights. These values are meant to be numeric. If they are not, igraph will silently try to convert them with as.numeric().

- If there is no weight column, st_network_paths() internally calculates the geographic lengths of the edges and uses those as weights.



<!-- #  {.tabset .tabset-fade .tabset-pills} -->

```{r}
net = as_sfnetwork(roxel, directed = FALSE) %>%
  st_transform(3035) %>%
  activate("edges") %>%
  mutate(weight = edge_length())
net
```

```{r}
paths = st_network_paths(net, from = 495, to = c(458, 121))
paths
paths %>%
  slice(1) %>%
  pull(node_paths) %>%
  unlist()

paths %>%
  slice(1) %>%
  pull(edge_paths) %>%
  unlist()

plot_path = function(node_path) {
  net %>%
    activate("nodes") %>%
    slice(node_path) %>%
    plot(cex = 1.5, lwd = 1.5, add = TRUE)
}

colors = sf.colors(3, categorical = TRUE)

plot(net, col = "grey")
paths %>%
  pull(node_paths) %>%
  walk(plot_path)
net %>%
  activate("nodes") %>%
  st_as_sf() %>%
  slice(c(495, 121, 458)) %>%
  plot(col = colors, pch = 8, cex = 2, lwd = 2, add = TRUE)
```

- points that do not intersect with any node in the network

```{r}
p1 = st_geometry(net, "nodes")[495] + st_sfc(st_point(c(50, -50)))
st_crs(p1) = st_crs(net)
p2 = st_geometry(net, "nodes")[458]
p3 = st_geometry(net, "nodes")[121] + st_sfc(st_point(c(-10, 100)))
st_crs(p3) = st_crs(net)

paths = st_network_paths(net, from = p1, to = c(p2, p3))

plot(net, col = "grey")
paths %>%
  pull(node_paths) %>%
  walk(plot_path)
plot(c(p1, p2, p3), col = colors, pch = 8, cex = 2, lwd = 2, add = TRUE)
```


```{r}
# Our network consists of several unconnected components.
with_graph(net, graph_component_count())

connected_net = net %>%
  activate("nodes") %>%
  filter(group_components() == 1)

plot(net, col = colors[2])
plot(connected_net, cex = 1.1, lwd = 1.1, add = TRUE)
```

- Retrieving an OD cost matrix

```{r}
st_network_cost(net, from = c(p1, p2, p3), to = c(p1, p2, p3))

with_graph(net, graph_order())
cost_matrix = st_network_cost(net)
dim(cost_matrix)
```

- Closest facility analysis

```{r}
# Select a random set of sites and facilities.
# We select random locations within the bounding box of the nodes.
set.seed(128)
hull = net %>%
  activate("nodes") %>%
  st_geometry() %>%
  st_combine() %>%
  st_convex_hull()

sites = st_sample(hull, 50, type = "random")
facilities = st_sample(hull, 5, type = "random")

# Blend the sites and facilities into the network to get better results.
# Also select only the largest connected component.
new_net = net %>%
  activate("nodes") %>%
  filter(group_components() == 1) %>%
  st_network_blend(c(sites, facilities))
#> Warning: st_network_blend assumes attributes are constant over geometries

# Calculate the cost matrix.
# By default the weight column is used for edge weights.
# In our case this column contains the geographic lengths of the edges.
cost_matrix = st_network_cost(new_net, from = sites, to = facilities)

# Find for each site which facility is closest.
closest = facilities[apply(cost_matrix, 1, function(x) which(x == min(x))[1])]

# Create a line between each site and its closest facility, for visualization.
draw_lines = function(sources, targets) {
  lines = mapply(
    function(a, b) st_sfc(st_cast(c(a, b), "LINESTRING"), crs = st_crs(net)),
    sources,
    targets,
    SIMPLIFY = FALSE
  )
  do.call("c", lines)
}

connections = draw_lines(sites, closest)

# Plot the results.
plot(new_net, col = "grey")
plot(connections, col = colors[2], lwd = 2, add = TRUE)
plot(facilities, pch = 8, cex = 2, lwd = 2, col = colors[3], add = TRUE)
plot(sites, pch = 20, cex = 2, col = colors[2], add = TRUE)
```

- Route optimization

The traveling salesman problem (TSP package)

```{r}
set.seed(403)
rdm = net %>%
  st_bbox() %>%
  st_as_sfc() %>%
  st_sample(10, type = "random")
```

```{r}
net = activate(net, "nodes")
cost_matrix = st_network_cost(net, from = rdm, to = rdm)
# Use nearest node indices as row and column names.
rdm_idxs = st_nearest_feature(rdm, net)
row.names(cost_matrix) = rdm_idxs
colnames(cost_matrix) = rdm_idxs

round(cost_matrix, 0)
```

```{r}
tour = solve_TSP(TSP(cost_matrix))
tour_idxs = as.numeric(names(tour))
tour_idxs
# Approximate length of the route.
# In meters, since that was the unit of our cost values.
round(tour_length(tour), 0)
```

```{r}
# Define the nodes to calculate the shortest paths from.
# Define the nodes to calculate the shortest paths to.
# All based on the calculated order of visit.
from_idxs = tour_idxs
to_idxs = c(tour_idxs[2:length(tour_idxs)], tour_idxs[1])

# Calculate the specified paths.
tsp_paths = mapply(st_network_paths,
    from = from_idxs,
    to = to_idxs,
    MoreArgs = list(x = net)
  )["node_paths", ] %>%
  unlist(recursive = FALSE)

# Plot the results.
plot(net, col = "grey")
plot(rdm, pch = 20, col = colors[2], add = TRUE)

walk(tsp_paths, plot_path) # Reuse the plot_path function defined earlier.

plot(
  st_as_sf(slice(net, rdm_idxs)),
  pch = 20, col = colors[3], add = TRUE
)
plot(
  st_as_sf(slice(net, tour_idxs[1])),
  pch = 8, cex = 2, lwd = 2, col = colors[3], add = TRUE
)
text(
  st_coordinates(st_as_sf(slice(net, tour_idxs[1]))) - c(200, 90),
  labels = "start/end\npoint"
)
```

- Isochrones and isodistances

```{r}
# How many edge types are there?
types = net %>%
  activate("edges") %>%
  pull(type) %>%
  unique()
types

# Randomly define a walking speed in m/s for each type.
# With values between 3 and 7 km/hr.
set.seed(1)
speeds = runif(length(types), 3 * 1000 / 60 / 60, 7 * 1000 / 60 / 60)
# Assign a speed to each edge based on its type.
# Calculate travel time for each edge based on that.
net = net %>%
  activate("edges") %>%
  group_by(type) %>%
  mutate(speed = units::set_units(speeds[cur_group_id()], "m/s")) %>%
  mutate(time = weight / speed) %>%
  ungroup()

net
```

```{r}
net = activate(net, "nodes")

p = net %>%
  st_geometry() %>%
  st_combine() %>%
  st_centroid()

iso = net %>%
  filter(node_distance_from(st_nearest_feature(p, net), weights = time) <= 600)

iso_poly = iso %>%
  st_geometry() %>%
  st_combine() %>%
  st_convex_hull()

plot(net, col = "grey")
plot(iso_poly, col = NA, border = "black", lwd = 3, add = TRUE)
plot(iso, col = colors[2], add = TRUE)
plot(p, col = colors[1], pch = 8, cex = 2, lwd = 2, add = TRUE)
```

- Custom routing

```{r}
table(roxel$type)
paths_sf = net %>%
  activate("edges") %>%
  slice(unlist(paths$edge_paths)) %>%
  st_as_sf()

table(paths_sf$type)

plot(paths_sf["type"], lwd = 4, key.pos = 4, key.width = lcm(4))
```


```{r}
weighting_profile = c(
  cycleway = Inf,
  footway = Inf,
  path = Inf,
  pedestrian = Inf,
  residential = 3,
  secondary = 1,
  service = 1,
  track = 10,
  unclassified = 1
)

weighted_net = net %>%
  activate("edges") %>%
  mutate(multiplier = weighting_profile[type]) %>%
  mutate(weight = edge_length() * multiplier)
```

```{r}
weighted_paths = st_network_paths(weighted_net, from = 495, to = c(458, 121))

weighted_paths_sf = weighted_net %>%
  activate("edges") %>%
  slice(unlist(weighted_paths$edge_paths)) %>%
  st_as_sf()

table(weighted_paths_sf$type)

plot(st_as_sf(net, "edges")["type"], lwd = 4,
     key.pos = NULL, reset = FALSE, main = "Distance weights")
plot(st_geometry(paths_sf), add = TRUE)
plot(st_as_sf(net, "edges")["type"], lwd = 4,
     key.pos = NULL, reset = FALSE, main = "Custom weights")
plot(st_geometry(weighted_paths_sf), add = TRUE)
```


# Portland

Zones 


```{r}
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# pdx.bg <- st_centroid(pdx_bg)
# mapview(pdx_bg); mapview(pdx.bg)
# class(pdx_bg)
pdx_bg <- pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
  mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
  select(-INTPTLAT,-INTPTLON)
pdx.bg <- st_centroid(pdx_bg)
#  sf::st_drop_geometry()
```

route

```{r}
library(dodgr)
pdx.net <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdxstreetnet.Rds")
class(pdx.net)
dim(pdx.net) 
pdx.net <- pdx.net %>% select(osm_id, highway, geometry)
# table(pdx.net$highway)
# weight.name <- c("construction", "proposed", "crossing", "abandoned") #"raceway", "platform", "corridor", , "elevator"
pdx.net.main<- pdx.net[which(pdx.net$highway%in% c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")),]
pdx.net.main <- pdx.net.main %>% select(osm_id, highway, geometry)
rm(pdx.net)
```


```{r}
net = as_sfnetwork(pdx.net.main, directed = FALSE) %>%
  # st_transform(3035) %>%
  activate("edges") %>%
  mutate(weight = edge_length())
net
```

```{r}
MotorVehicleSystem_RLIS <- st_read( "~/urbanstudy/NITC-Resilience/content/retr/MotorVehicleSystem_RLIS.shp")
st_geometry(MotorVehicleSystem_RLIS)
net_RLIS <- st_cast(MotorVehicleSystem_RLIS, "LINESTRING") # MULTILINESTRING to LINESTRING
net = as_sfnetwork(net_RLIS, directed = FALSE) %>%
  # st_transform(3035) %>%
  activate("edges") %>%
  mutate(weight = edge_length())
# Error: Geometries are not all of type LINESTRING, or all of type POINT
net
```


```{r}
plot_path = function(node_path) {
  net %>%
    activate("nodes") %>%
    slice(node_path) %>%
    plot(cex = 1.5, lwd = 1.5, add = TRUE)
}
colors = sf.colors(3, categorical = TRUE)
```




```{r}
od.sf <- pdx.bg %>% filter(GEOID%in%c("410670326081","410510056002", "410510073001")) #%>% select(-GEOID)
od.sf <- od.sf %>% st_transform(st_crs(net))

paths = st_network_paths(net, from = od.sf, to = od.sf)

# plot(pdx_bg["GEOID"], col = "grey")
plot(st_geometry(net, "edges"), col = "grey")
paths %>%
  pull(node_paths) %>%
  walk(plot_path)
plot(od.sf, col = colors, pch = 8, cex = 2, lwd = 2, add = TRUE)
```

```{r}
st_network_cost(net, from = c(p1, p2, p3), to = c(p1, p2, p3))

with_graph(net, graph_order())
cost_matrix = st_network_cost(net)
dim(cost_matrix)
```

# Network cleaning functions

```{r}
p1 = st_point(c(0, 1))
p2 = st_point(c(1, 1))
p3 = st_point(c(2, 1))
p4 = st_point(c(3, 1))
p5 = st_point(c(4, 1))
p6 = st_point(c(3, 2))
p7 = st_point(c(3, 0))
p8 = st_point(c(4, 3))
p9 = st_point(c(4, 2))
p10 = st_point(c(4, 0))
p11 = st_point(c(5, 2))
p12 = st_point(c(5, 0))
p13 = st_point(c(5, -1))
p14 = st_point(c(5.8, 1))
p15 = st_point(c(6, 1.2))
p16 = st_point(c(6.2, 1))
p17 = st_point(c(6, 0.8))
p18 = st_point(c(6, 2))
p19 = st_point(c(6, -1))
p20 = st_point(c(7, 1))

l1 = st_sfc(st_linestring(c(p1, p2, p3)))
l2 = st_sfc(st_linestring(c(p3, p4, p5)))
l3 = st_sfc(st_linestring(c(p6, p4, p7)))
l4 = st_sfc(st_linestring(c(p8, p11, p9)))
l5 = st_sfc(st_linestring(c(p9, p5, p10)))
l6 = st_sfc(st_linestring(c(p8, p9)))
l7 = st_sfc(st_linestring(c(p10, p12, p13, p10)))
l8 = st_sfc(st_linestring(c(p5, p14)))
l9 = st_sfc(st_linestring(c(p15, p14)))
l10 = st_sfc(st_linestring(c(p16, p15)))
l11 = st_sfc(st_linestring(c(p14, p17)))
l12 = st_sfc(st_linestring(c(p17, p16)))
l13 = st_sfc(st_linestring(c(p15, p18)))
l14 = st_sfc(st_linestring(c(p17, p19)))
l15 = st_sfc(st_linestring(c(p16, p20)))

lines = c(l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15)

edge_colors = function(x) rep(sf.colors(12, categorical = TRUE)[-2], 2)[c(1:ecount(x))]

net = as_sfnetwork(lines)
plot(st_geometry(net, "edges"), col = edge_colors(net), lwd = 4)
plot(st_geometry(net, "nodes"), pch = 20, cex = 2, add = TRUE)
```


```{r}
simple = net %>%
  activate("edges") %>%
  arrange(edge_length()) %>%
  filter(!edge_is_multiple()) %>%
  filter(!edge_is_loop())

plot(st_geometry(simple, "edges"), col = edge_colors(simple), lwd = 4)
plot(st_geometry(simple, "nodes"), pch = 20, cex = 1.5, add = TRUE)
```

```{r}
# subdivision = convert(simple, to_spatial_subdivision)
#> Warning: to_spatial_subdivision assumes attributes are constant over geometries

smoothed = convert(simple, to_spatial_smooth)
plot(st_geometry(smoothed, "edges"), col = "grey", lwd =1) #edge_colors(smoothed)
```

```{r}
# Retrieve the coordinates of the nodes.
node_coords = smoothed %>%
  activate("nodes") %>%
  st_coordinates()

# Cluster the nodes with the DBSCAN spatial clustering algorithm.
# We set eps = 0.5 such that:
# Nodes within a distance of 0.5 from each other will be in the same cluster.
# We set minPts = 1 such that:
# A node is assigned a cluster even if it is the only member of that cluster.
clusters = dbscan(node_coords, eps = 0.5, minPts = 1)$cluster

# Add the cluster information to the nodes of the network.
clustered = smoothed %>%
  activate("nodes") %>%
  mutate(cls = clusters)
```

```{r}
clustered = clustered %>%
  mutate(cmp = group_components())
select(clustered, cls, cmp)

plot(st_geometry(clustered, "edges"), col = "grey", lwd = 1)
```


Error in mapply(append_source, E2, N2, SIMPLIFY = FALSE) :
object 'E2' not found


```{r}
contracted = convert(
  clustered,
  to_spatial_contracted,
  cls, cmp,
  simplify = TRUE
)

```


```{r}
clustered = clustered %>%
  activate("nodes") %>%
  mutate(is_priority = sample(
    c(TRUE, FALSE),
    vcount(clustered),
    replace = TRUE
  ))

# Define how we want to combine the attributes.
# For the boolean is_priority variable:
# --> We want it to be TRUE if any of the nodes has a values of TRUE.
# For the others, which were used as grouping variables:
# --> Drop these attributes.
combinations = list(
  is_priority = function(x) any(x),
  "ignore"
)

# Contract with to_spatial_contracted.
contracted = convert(
  clustered,
  to_spatial_contracted,
  cls, cmp,
  simplify = TRUE,
  summarise_attributes = combinations
)
```

```{r}
plot(st_geometry(net, "edges"), col = edge_colors(net), lwd = 4)
plot(st_geometry(net, "nodes"), pch = 20, cex = 1.5, add = TRUE)
plot(st_geometry(contracted, "edges"), col = edge_colors(contracted), lwd = 4)
plot(st_geometry(contracted, "nodes"), pch = 20, cex = 1.5, add = TRUE)
```

