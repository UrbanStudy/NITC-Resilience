network$LOCALID %in% id_broken
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
table(id_broken)
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,mapview, osmdata, dodgr, bench) # crsuggest,
# remotes::install_github('ropensci/osmdata')
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github ("ropensci/osmplotr")
options(scipen=10)
options(digits=6)
# packageVersion ("dodgr")
net <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/original data/pdxstreetnet.Rds")
net$access %>% table()
net$access %>% summary()
net$access %>% table()
mapview(net,zcol="access")
network.df <- network
st_geometry(network.df) <- NULL
network.df$LOCALID %in% id_broken
network.df %>% filter(LOCALID %in% id_broken)
table(id_broken)
mapview(disaster_nearby)
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
network$MOTORCODE %>% table()
mapview(network, zcol="MTORCODE")
mapview(network, zcol="MOTORCODE")
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
mapview(network_broken)
mapview(network_broken) + mapview(disaster_nearby)
?mapview
mapview(network_broken) + mapview(disaster_nearby, color="darkred" )
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network, zcol="MOTORCODE")
!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
## Identify the id of road where are nearby the polygons
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
## Identify the id of road where are nearby the polygons
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID %>% unique()
## Identify the id of road where are nearby the polygons
id_broken <- network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID %>% unique()
network[network$LOCALID %in% id_broken,]
network$MOTORCODE[network$LOCALID %in% id_broken,]
network$MOTORCODE[network$LOCALID %in% id_broken]
network[network$LOCALID %in% id_broken,"MOTORCODE"]
network[network$LOCALID %in% id_broken,c("MOTORCODE")]
network %>% as.data.frame()
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), "LOCALID"] %>% unique()
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
id_broken
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network.df <- network %>% as.data.frame()
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID %in% id_broken)
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df
network.df %>% filter(LOCALID %in% id_broken)
id_broken
network.df %>% filter(LOCALID = id_broken)
network.df %>% filter(LOCALID == id_broken)
id_broken
id_broken[1]
network.df %>% filter(LOCALID == id_broken[2])
id_broken[2]
network.df %>% filter(LOCALID %in% id_broken[2])
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
table(id_broken)
network[network$LOCALID %in% id_broken,c("MOTORCODE")]
network[network$LOCALID == "134949",c("MOTORCODE")]
network.df[network.df$LOCALID == "134949",c("MOTORCODE")]
network.df[network.df$LOCALID == "134949",]
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network[network$LOCALID == "134949",]
network.df[network.df$LOCALID == "134949",]
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network.df <- network  %>% as.data.frame()
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network.df[network.df$LOCALID == "134949",]
network[network$LOCALID == "134949",]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
### Select two BG on the edge of Metro
# pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
### Increase from 12868 to 12883 obs.
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
# mapview(disaster_nearby)
# network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
# mapview(network_broken) + mapview(disaster_nearby, color="darkred" )
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
# network.df <- network # %>% as.data.frame()
# st_geometry(network.df) <- NULL
# network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
# network[network$LOCALID == "134949",]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network, zcol="MOTORCODE")
network$MOTORCODE %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE
mapview(network[network$MOTORCODE=="99",])
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network[network$MOTORCODE=="99",])
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network[network$MOTORCODE=="99",])
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
mapview(network,zcol="MOTORCODE")
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
id_broken %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[network$LOCALID %in% id_broken]
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network[network$LOCALID == "134949",]
network.df %>% dplyr::filter(LOCALID == "134949") #%in% id_broken[2]
network %>% dplyr::filter(LOCALID == "134949")
network %>% dplyr::filter(LOCALID %in% id_broken)
mapview(network[network$MOTORCODE=="99",])
mapview(network,zcol="MOTORCODE")
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
### Select two BG on the edge of Metro
# pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
library(tidyverse)
library(sf)
library(dodgr)
library(mapview)
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
### Select two BG on the edge of Metro
# pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network[st_buffer(disaster_nearby, buffer), ] # default op = st_intersects
network_broken <- network[st_buffer(disaster_nearby, buffer), ] # default op = st_intersects
network_broken$LOCALID
network[network$LOCALID == "134949",]
network[network_broken,]
network[network$LOCALID %in% network_broken$LOCALID,]
network[network_broken,]
network[network_broken, op = st_touches]
mapview(network[network_broken, op = st_touches])
mapview(network[network_broken,]) # op = st_touches
mapview(network[network$LOCALID %in% network_broken$LOCALID,])
mapview(network)
mapview(network[network$LOCALID %in% network_broken$LOCALID,])
network[network$LOCALID %in% network_broken$LOCALID,]
mapview(network[network_broken,]) # op = st_touches
mapview(network_broken) # op = st_touches
network_broken$LOCALID
network_broken$LOCALID %>% unique()
network_broken$LOCALID %>% unique()
id_broken <- network_broken$LOCALID %>% unique()
network %>% filter(lengths(st_touches(., network_broken)) > 0)
network %>% filter(lengths(st_intersects(., network_broken)) > 0)
network_broken
mapview(network %>% filter(lengths(st_intersects(., network_broken)) > 0))
engths(st_intersects(., network_broken))
lengths(st_intersects(., network_broken))
lengths(st_intersects(network, network_broken))
network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
mapview(network_left)
mapview(network_broken, color="red")+ mapview(network_left)
network_left <- network[!st_buffer(disaster_nearby, buffer), ]
network_left <- network[st_buffer(disaster_nearby, buffer), op = st_disjoint]
mapview(network_broken, color="red")+ mapview(network_left)
mapview(network_broken, color="red") + mapview(network_left) + mapview(disaster_nearby)
network_left
# network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
network_left <- network[st_buffer(disaster_nearby, buffer), op = st_disjoint]
mapview(network_left) + mapview(disaster_nearby)
network[!network_broken,]
# network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
network_left <- network[network_broken, op = st_disjoint]
network_broken <- network[st_buffer(disaster_nearby, buffer), ] # default op = st_intersects; st_touches
# network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
network_left <- network[network_broken, op = st_disjoint]
# network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
network_left <- network[network_broken, op = st_disjoint]
network_left <- network %>% filter(lengths(st_intersects(., network_broken)) == 0)
mapview(network_left) + mapview(disaster_nearby)
lengths(st_intersects(network, network_broken)) %>%  table()
network_left <- network %>% filter(lengths(st_intersects(., network_broken)) < 2)
mapview(network_left) + mapview(disaster_nearby)
network_left <- network %>% filter(lengths(st_intersects(., network_broken)) ==0 )
# network_left <- network[network_broken, op = st_disjoint]
network_left <- network[network$LOCALID %in% network_broken$LOCALID,]
# network_left <- network[network_broken, op = st_disjoint]
network_left <- network[!(network$LOCALID %in% network_broken$LOCALID),]
mapview(network_left) + mapview(disaster_nearby)
network %>% filter(LOCALID %in% network_broken$LOCALID)
?mutate_at
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate_at(MOTORCODE = "99") %>% select(MOTTORCODE))
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate_at(MOTORCODE = "99") %>% select(MOTTORCODE)
network %>% filter(LOCALID %in% network_broken$LOCALID)
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate_at(MOTORCODE = "99")
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate_at("MOTORCODE" = "99") %>% select(MOTTORCODE)
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate_at("MOTORCODE", .= "99") %>% select(MOTTORCODE)
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate(MOTORCODE = "99") %>% select(MOTTORCODE)
network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate(MOTORCODE = "99") %>% select(MOTORCODE)
network[network_broken, op = st_disjoint]
network_left <- network %>% filter(lengths(st_intersects(., network_broken)) ==0 )
# 0     1     2     3     4     5
# 12586   152    74    42     7     7
# network_left <- network[network_broken, op = st_disjoint]
network_left <- network[!(network$LOCALID %in% network_broken$LOCALID),] # Reduce from 12868 to 12586
# 134949 135431 135467 135543 136370 136546 136549 136715 136853 150144
# 24     19     20      9      6      7      5      3      3     51
network[network$LOCALID == "134949",]
network %>% dplyr::filter(LOCALID == "134949")
network %>% dplyr::filter(LOCALID %in% id_broken)
id_broken
# 134949 135431 135467 135543 136370 136546 136549 136715 136853 150144
# 24     19     20      9      6      7      5      3      3     51
network[network$LOCALID %in% id_broken,]
network$MOTORCODE[network$LOCALID %in% id_broken]
network %>% dplyr::filter(LOCALID %in% id_broken)
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
mapview(network, zcol= "MOTORCODE")
network$MOTORCODE %>% table()
## Modify the value of MOTORCODE to 99
network <- network %>% filter(LOCALID %in% network_broken$LOCALID) %>% mutate(MOTORCODE = "99") %>% select(MOTORCODE)
mapview(network, zcol= "MOTORCODE")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network %>% transmute(MOTORCODE = "99", case_when(LOCALID %in% network_broken$LOCALID)) %>% select(MOTORCODE)
network %>% case_when(transmute(MOTORCODE = "99"), LOCALID %in% network_broken$LOCALID) %>% select(MOTORCODE)
network %>% case_when(mutate(MOTORCODE = "99"), LOCALID %in% network_broken$LOCALID) %>% select(MOTORCODE)
network %>% mutate(MOTORCODE = case_when(LOCALID %in% network_broken$LOCALID ~"99")) %>% select(MOTORCODE)
## Modify the value of MOTORCODE to 99
# network <- network %>% filter(LOCALID %in% network_broken$LOCALID) %>% transmute(MOTORCODE = "99") %>% select(MOTORCODE)
network <- network %>% mutate(MOTORCODE = case_when(LOCALID %in% network_broken$LOCALID ~"99")) # %>% select(MOTORCODE)
mapview(network, zcol= "MOTORCODE")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the broken network
# network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network_broken <- network[st_buffer(disaster_nearby, buffer), ] # default op = st_intersects; st_touches
## Identify the id of road where are nearby the polygons
id_broken <- network_broken$LOCALID %>% unique()
## Filter the left network
# network_left <- network %>% filter(lengths(st_intersects(., network_broken)) ==0 ) # Reduce from 12868 to 12586
# 0     1     2     3     4     5
# 12586   152    74    42     7     7
# network_left <- network[network_broken, op = st_disjoint]
network_left <- network[!(network$LOCALID %in% network_broken$LOCALID),] # Reduce from 12868 to 12721
## Modify the value of MOTORCODE to 99
# network <- network %>% filter(LOCALID %in% network_broken$LOCALID) %>% transmute(MOTORCODE = "99") %>% select(MOTORCODE)
network <- network %>% mutate(MOTORCODE = case_when(LOCALID %in% network_broken$LOCALID ~ 99)) # %>% select(MOTORCODE)
mapview(network, zcol= "MOTORCODE")
network$MOTORCODE %>% table()
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network %>% mutate(MOTORCODE = ifelse (LOCALID %in% network_broken$LOCALID,99,MOTORCODE))
network <- network %>% mutate(MOTORCODE = ifelse (LOCALID %in% network_broken$LOCALID,99,MOTORCODE)) # %>% select(MOTORCODE)
network$MOTORCODE %>% table()
mapview(network, zcol= "MOTORCODE")
## Choose Census crs
crs <- st_crs(pdx_bg)
network <- network %>% st_transform(crs)
# network_broken <- network_broken %>% st_transform(crs)
### From EPSG 6360 to 4269
D_trans <- Hospital %>% st_transform(crs)
### Use centroid points
o <- st_coordinates(st_centroid(pdx_bg))
d <- st_coordinates(D_trans) # [,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
# E3 # Weighting the network ############################
##  Create the weight table
### Ten levels of roads plus a unaccessible level
way <- c(sort(unique (network[["MOTORCODE"]])),99) #
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
length(way)
# E3 # Weighting the network ############################
##  Create the weight table
### Ten levels of roads plus a unaccessible level
way <- sort(unique (network[["MOTORCODE"]])) #c(,99)
# E3 # Weighting the network ############################
##  Create the weight table
### Ten levels of roads plus a unaccessible level
way <- sort(unique (network[["MOTORCODE"]])) #c(,99)
weights <- c (rep(1,10), 0.001) # length=10 # 0.9-0.8 # 0.6-0.4 ## 1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8,
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
wts
wts <- data.frame (name = "custom",
way = as.factor(way) ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
str(wts)
wts <- data.frame (name = "custom",
way = as.character(way) ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
wts <- data.frame (name = "custom",
way = as.character(way) ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
network$LOCALID <- network$LOCALID %>% as.character()
net <- net[net$component == 1, ]
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
sort(unique (network[["MOTORCODE"]]))
way <- sort(unique (network[["MOTORCODE"]])) #c(,9999)
######## Adding a new layer of 9999
### Ten levels of roads
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
network %>% mutate_at(c("LOCALID","MOTORCODE"), as.character)
network <- network %>% mutate_at(c("LOCALID","MOTORCODE"), as.character)
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
wts <- data.frame (name = "custom",
way = as.character(way) ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
rep(1,10)
View(wts)
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8) # length=10 # 0.9-0.8 # 0.6-0.4 ## , 0.001
way <- sort(unique (network[["MOTORCODE"]])) #c(,9999)
######## Adding a new layer of 9999
### Ten levels of roads
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network <- network %>% st_transform(crs)
## Full network
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID",
keep_cols = "access")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8) # length=10 # 0.9-0.8 # 0.6-0.4 ## , 0.001
way <- sort(unique (network[["MOTORCODE"]])) #c(,9999)
######## Adding a new layer of 9999
### Ten levels of roads
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
## Choose Census crs
crs <- st_crs(pdx_bg2)
network <- network %>% st_transform(crs)
## Full network
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID",
keep_cols = "access")
