pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet)
pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
1"),by = c("GEOID"="dest")) %>%
# mapview(pdx_bg)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet)
pdx3cnet.main<- pdx3cnet[which(pdx3cnet$highway%in% c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")),] # ,"unclassified", "residential"
pdx3cnet.main <- pdx3cnet.main %>% select(osm_id, highway, geometry)
saveRDS(pdx3cnet.main, "~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
# mapview(pdx_bg)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet.main)
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(-INTPTLAT,-INTPTLON)
# pdx.bg <- st_centroid(pdx_bg)
# mapview(pdx_bg)
od.all <- pdx_df  %>% select(-GEOID)
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
odd.matrix[1:10,1:10]
class(odd.matrix)
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
head(od.table)
# mean(d.c.m.all[upper.tri(d.c.m.all)])
# od.table1 <- stplanr::odmatrix_to_od(d.c.m.all)
# head(od.table1)
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
str(pdx_bg)
# mapview(pdx_bg)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
# mapview(pdx_bg)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") + mapview(pdx3cnet.main)
##################################################################
# Calculate all network distance
## Read the network data
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github("ropensci/stplanr")
options(scipen=10)
options(digits=6)
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
p_load(tidyverse,sf,mapview, osmdata, dodgr, bench,igraph) # crsuggest,
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
##################################################################
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(-INTPTLAT,-INTPTLON)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
odd.matrix[1:10,1:10]
class(odd.matrix)
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
head(od.table)
summary(od.dist$dist)
summary(od.table$dist)
ploty(density(od.table$dist))
plot(density(od.table$dist))
## Join Block Group with long OD table
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") #+ mapview(pdx3cnet.main)
##################################################################
# Calculate all network distance after match points to graph
vcm <- dodgr_vertices (net3cc.main)
# match block group points to vertex
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
odd.matrix.match <- dodgr_dists (net3cc.main, from = vcm.od, to = vcm.od)
# sum(is.na.data.frame(d.c.m.all.match))
# main roads have no NA
mean(d.c.all.match[upper.tri(odd.matrix.match)],na.rm = T)
# sum(is.na.data.frame(d.c.m.all.match))
# main roads have no NA
mean(odd.matrix.match[upper.tri(odd.matrix.match)],na.rm = T)
mean(odd.matrix.match[upper.tri(odd.matrix.match)])
# The total distances are the same
## Convert to long table
od.table.match <-odd.matrix.match %>% as_tibble(rownames= "orig") %>%
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
row.names(odd.matrix.match) <- pdx_df$GEOID
colnames(odd.matrix.match) <- pdx_df$GEOID
# The total distances are the same
## Convert to long table
od.table.match <-odd.matrix.match %>% as_tibble(rownames= "orig") %>%
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table.match$dist)
plot(density(od.table.match$dist))
igrcm <- dodgr_to_igraph (net3cc.main)
igr.odd.matrix <- distances (igrcm, v = od.all, to = od.all)
igr.odd.matrix <- distances (igrcm, v = vcm.od, to = vcm.od)
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1])
vcm.od[1]
vcm.od[-1]
igrcm
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1], algorithm = "unweighted")
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[100], algorithm = "unweighted")
igr.odd.matrix
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[1:100], algorithm = "unweighted")
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[2:100], algorithm = "unweighted")
igr.odd.matrix
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1], algorithm = "unweighted")
igr.odd.matrix
igr.odd.matrix <- distances (igrcm, v = od.all[1], to = od.all[-1], algorithm = "unweighted")
str(od.all)
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,sf,mapview, osmdata, osmextract, dodgr, bench,igraph) # crsuggest,
# remotes::install_github('ropensci/osmdata')
# devtools::install_github ("ropensci/osmplotr")
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github("ropensci/stplanr")
options(scipen=10)
options(digits=6)
# packageVersion ("dodgr")
od
# pdx.bg <- st_centroid(pdx_bg)
od <- pdx_df %>% filter(GEOID%in%c("410670326081","410510056002", "410510073001")) %>% select(-GEOID) # airport(Hils)	PSU airport(PDX)
od
od.all
od.all
# remotes::install_github('ropensci/osmdata')
# devtools::install_github ("ropensci/osmplotr")
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github("ropensci/stplanr")
options(scipen=10)
options(digits=6)
##################################################################
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(-INTPTLAT,-INTPTLON)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all
pdx_df
pdx_bg
pdx_df
od.all[1]
pdx_df
pdx_bg
pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #%>% as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(-INTPTLAT,-INTPTLON)
## Select GROID and centroid points
pdx_df <- pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #%>% as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_df
pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #%>% as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON))
pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #%>% as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry)
pdx_bg
pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry)
pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON))
?as.numeric
pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=is.numeric(INTPTLAT),lon=is.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=numeric(INTPTLAT),lon=numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## Select GROID and centroid points
options(digits = 12)
pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_df$lat
options(digits=7)
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all$lat
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all$lat
## Select GROID and centroid points
options(digits = 12)
pdx_df <- pdx_bg %>% as_tibble() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% #
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all$lat
od.all[10,10]
od.all[10,2]
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all[10,2]
pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
od.all
igr.odd.matrix <- distances (igrcm, v = od.all[1], to = od.all[-1], algorithm = "unweighted")
# match block group points to vertex
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
table(vcm.od)
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1], algorithm = "unweighted")
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1]) #, algorithm = "unweighted"
vcm.od
##################################################################
# Calculate all network distance after match points to graph
vcm <- dodgr_vertices (net3cc.main)
# match block group points to vertex
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
vcm.od
distance_table(igrcm, directed = F)
mean_distance(igrcm, directed = T, unconnected = TRUE)
mean_distance(igrcm, directed = F, unconnected = TRUE)
mean_distance(igrcm, unconnected = TRUE) # , directed = T
odd.igr<- distance_table(igrcm) # , directed = T T and F are the same
odd.igr$res
summary(odd.igr$res)
plot(density(odd.igr$res))
odd.igr<- distance_table(igrcm, directed = T) #  T and F are the same
plot(density(odd.igr$res))
odd.igr<- distance_table(igrcm, directed = F) #  T and F are the same
plot(density(odd.igr$res))
summary(odd.igr$res)
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1]) #, algorithm = "unweighted"
igr.odd.matrix <- distances (igrcm, v = od.all[1], to = od.all[-1]) #, algorithm = "unweighted"
igr.odd.matrix <- distances (igrcm, v = od.all, to = od.all) #, algorithm = "unweighted"
od.all[1]
igr.odd.matrix <- distances (igrcm, v = od.all[1,], to = od.all[-1,]) #, algorithm = "unweighted"
od.all[1,]
##################################################################
# Calculate all network distance after match points to graph
vcm <- dodgr_vertices (net3cc.main)
# match block group points to vertex
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
odd.matrix.match <- dodgr_dists (net3cc.main, from = vcm.od, to = vcm.od)
row.names(odd.matrix.match) <- pdx_df$GEOID
colnames(odd.matrix.match) <- pdx_df$GEOID
# sum(is.na.data.frame(d.c.m.all.match))
# main roads have no NA
mean(odd.matrix.match[upper.tri(odd.matrix.match)]) #,na.rm = T
## Convert to long table
od.table.match <-odd.matrix.match %>% as_tibble(rownames= "orig") %>%
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table.match$dist)
plot(density(od.table.match$dist))
igrcm <- dodgr_to_igraph (net3cc.main)
igr.odd.matrix <- distances (igrcm, v = od.all[1,], to = od.all[-1,]) #, algorithm = "unweighted"
od.all
##################################################################
# Calculate all network distance after match points to graph
vcm <- dodgr_vertices (net3cc.main)
vcm
vcm.od
igrcm <- dodgr_to_igraph (net3cc.main)
igrcm
options(digits=7)
## Full three-county road network
pdx3cnet <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.Rds")
## Select the major roads
pdx3cnet.main<- pdx3cnet[which(pdx3cnet$highway%in%
c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")),] # ,"unclassified", "residential"
## Select Three columns
pdx3cnet.main <- pdx3cnet.main %>% select(osm_id, highway, geometry)
saveRDS(pdx3cnet.main, "~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
## Weighted network by "motorcar" include from, to, distance, and time.
net3c.main <- weight_streetnet (pdx3cnet.main, wt_profile ="motorcar") #
## Graph Contraction: Simplify the network
net3c.main <- net3c.main[net3c.main$component == 1, ]
net3cc.main <- dodgr_contract_graph (net3c.main)
## nrow (net3c.main); nrow (net3cc.main); nrow (net3cc.main) / nrow (net3c.main)
saveRDS(net3cc.main, "~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
##################################################################
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
options(digits = 12)
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
## All centroid points as OD
od.all <- pdx_df  %>% select(-GEOID)
##################################################################
# Calculate all network distance
## Read the network data
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3cc.main, from = od.all, to = od.all)
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
plot(density(od.table$dist))
## Join Block Group with long OD table
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") #+ mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410059800001"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
igrcm <- dodgr_to_igraph (net3cc.main)
igr.odd.matrix <- distances (igrcm, v = od.all[1,], to = od.all[-1,]) #, algorithm = "unweighted"
igr.odd.table <- distance_table(igrcm, directed = F) #  F are the shorter
summary(igr.odd.table$res)
plot(density(igr.odd.table$res))
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,sf,mapview, osmdata, osmextract, dodgr, bench,igraph) # crsuggest,
# remotes::install_github('ropensci/osmdata')
# devtools::install_github ("ropensci/osmplotr")
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github("ropensci/stplanr")
options(scipen=10)
options(digits=7)
# packageVersion ("dodgr")
# pdx.bg <- st_centroid(pdx_bg)
od <- pdx_df %>% filter(GEOID%in%c("410670326081","410510056002", "410510073001")) %>% select(-GEOID) # airport(Hils)	PSU airport(PDX)
vcm <- dodgr_vertices (netc.main)
vcm <- dodgr_vertices (net3cc.main)
fromcm <- match_points_to_graph (vcm, od[1,], connected = TRUE)
tocm <- match_points_to_graph (vcm, od[2,], connected = TRUE)
d.c.main.igr <- distances (igrcm, v = fromcm, to = tocm)
fromcm
tocm
od
od[2,]
tocm
netc.main
d.c.main.match <- dodgr_dists (graph = netc.main, from = vcm$id[fromcm], to = vcm$id[tocm])
d.c.main.match <- dodgr_dists (graph = netc.main, from = vcm$id[fromcm], to = vcm$id[tocm])
igrcm
vcm.od
# match block group points to vertex
vcm.od <- match_points_to_graph (vcm, od.all, connected = TRUE)
vcm.od
vcm.od
igr.odd.matrix <- distances (igrcm, v = vcm.od[1], to = vcm.od[-1]) #, algorithm = "unweighted"
igr.odd.matrix <- distances (igrcm, v = vcm.od[2], to = vcm.od[-2]) #, algorithm = "unweighted"
igr.odd.matrix <- distances (igrcm, v = vcm.od[3], to = vcm.od[-3]) #, algorithm = "unweighted"
igr.odd.matrix <- distances (igrcm, v = vcm.od[4], to = vcm.od[-4]) #, algorithm = "unweighted"
summary(od.table.match$dist)
odd.matrix.match <- dodgr_dists (net3cc.main, from = vcm.od, to = vcm.od)
row.names(odd.matrix.match) <- pdx_df$GEOID
colnames(odd.matrix.match) <- pdx_df$GEOID
## Convert to long table
od.table.match <-odd.matrix.match %>% as_tibble(rownames= "orig") %>%
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
####### Matching the centroid points to graph doesn't change anything #######
od.table.match[which(max(od.table.match$dist)),]
####### Matching the centroid points to graph doesn't change anything #######
od.table.match[which(od.table.match$dist=max(od.table.match$dist)),]
####### Matching the centroid points to graph doesn't change anything #######
od.table.match[which(od.table.match$dist==max(od.table.match$dist)),]
####### Matching the centroid points to graph doesn't change anything #######
which(od.table.match$dist==max(od.table.match$dist))
igrcm
igr.odd.matrix <- distances (igrcm, v = vcm.od[4]) #, to = vcm.od[-4], algorithm = "unweighted"
igr.odd.matrix
vcm.od[4]
which.max(od.table.match$dist)
igr.odd.matrix <- distances (igrcm, v = vcm.od[which.max(od.table.match$dist)])
which.max(od.table.match$dist)
igr.odd.matrix <- distances (igrcm, v = vcm.od[which.max(od.table.match$dist),]) #, to = vcm.od[-4], algorithm = "unweighted"
od.table.match[which.max(od.table.match$dist),]
igr.odd.table <- distance_table(igrcm, directed = F) #  F are the shorter
summary(igr.odd.table$res)
igr.odd.table
####### Matching the centroid points to graph doesn't change anything #######
od.table.match[which.max(od.table.match$dist),]
## Join Block Group with long OD table
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") #+ mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410050243042"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3c.main, from = od.all, to = od.all)
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
plot(density(od.table$dist))
pdx_bg %>% left_join(od.table %>% filter(orig=="410050243042"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
pdx_bg %>% left_join(od.table %>% filter(orig=="410670326081"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
?dodgr_dists
net3cc.main
summary(net3cc.main$d)
plot(density(net3cc.main$d))
net3cc.main
?dodgr_dists
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3c.main, from = od.all, to = od.all, heap = "BHeap")
# heap = "BHeap",Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3c.main, from = od.all, to = od.all, heap = "TriHeapExt")
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
plot(density(od.table$dist))
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3c.main, from = od.all, to = od.all, heap = "Heap23")
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
plot(density(od.table$dist))
## Calculate OD matrix
odd.matrix <- dodgr_dists (net3c.main, from = od.all, to = od.all) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
row.names(odd.matrix) <- pdx_df$GEOID
colnames(odd.matrix) <- pdx_df$GEOID
## Convert to long table
od.table <-odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
summary(od.table$dist)
## Join Block Group with long OD table
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") #+ mapview(pdx3cnet.main)
pdx_bg %>% left_join(od.table %>% filter(orig=="410510103052"),by = c("GEOID"="dest")) %>%
mapview(z="dist")
