FROM 'lines'
WHERE highway IN ('motorway', 'primary', 'secondary', 'tertiary')", #, 'unclassified'
wkt_filter = st_as_text(st_transform(tri_cou, 4269)),
force_vectortranslate = TRUE
)
mapview(network2, zcol="highway")
# 2. Define the vectortranslate options
my_vectortranslate = c(
"-t_srs", "EPSG:4269",
"-select", "osm_id, highway",
"-where", "highway IN ('motorway', 'motorway_link',
'primary', 'primary_link',
'secondary', 'secondary_link',
'tertiary', 'tertiary_link')", #, 'unclassified'
"-nlt", "PROMOTE_TO_MULTI"
)
# 4. Read-in data
network <- oe_get("us/oregon", vectortranslate_options = my_vectortranslate,
boundary = tri_cou, boundary_type = "clipsrc")
mapview(network, zcol="highway")
mapview(its_lines.pbf)
mapview(its_lines.pbf, zcol="highway")
mapview(its_lines.pbf, zcol="highway")
# 2. Define the vectortranslate options
my_vectortranslate = c(
"-t_srs", "EPSG:4269",
"-select", "osm_id, highway",
# "-where", "highway IN ('motorway', 'motorway_link',
#                        'primary', 'primary_link',
#                        'secondary', 'secondary_link',
#                        'tertiary', 'tertiary_link')", #, 'unclassified'
"-nlt", "PROMOTE_TO_MULTI"
)
# 4. Read-in data
network <- oe_get("us/oregon", vectortranslate_options = my_vectortranslate,
boundary = tri_cou, boundary_type = "clipsrc")
network$highway %>% table()
mapview(network, zcol="highway")
# 2. Define the vectortranslate options
my_vectortranslate = c(
"-t_srs", "EPSG:4269",
"-select", "osm_id, highway",
"-where", "highway IN ('motorway', 'motorway_link',
'primary', 'primary_link',
'secondary', 'secondary_link',
'tertiary', 'tertiary_link', 'unclassified')", #
"-nlt", "PROMOTE_TO_MULTI"
)
# 4. Read-in data
network <- oe_get("us/oregon", vectortranslate_options = my_vectortranslate,
boundary = tri_cou, boundary_type = "clipsrc")
mapview(network, zcol="highway")
############################### SQL style method ################
network2  <-  oe_get(
"us/oregon",
query = "
SELECT osm_id, highway, geometry
FROM 'lines'
WHERE highway IN ('motorway', 'motorway_link',
'primary', 'primary_link',
'secondary', 'secondary_link',
'tertiary', 'tertiary_link', 'unclassified')", #
wkt_filter = st_as_text(st_transform(tri_cou, 4269)),
force_vectortranslate = TRUE
)
mapview(network, zcol="highway")
mapview(network2, zcol="highway")
### 985 keys "highway_1", "highway:fixme"
its_lines$aerialway %>% table()
its_lines <- oe_get("us/oregon", vectortranslate_options = c("-t_srs", "EPSG:4269"), quiet = FALSE)
### 985 keys "highway_1", "highway:fixme"
its_lines$aerialway %>% table()
### 985 keys "highway_1", "highway:fixme"
its_lines$highway %>% table()
# mapview(its_lines.pbf, zcol="highway")
mapview(its_lines.pbf, zcol="highway")
##  Import road network from Census
network <- roads(state = "41",county = tri_cou.id)
mapview(network,zcol='MTFCC')
highway.type <- c("motorway", "motorway_link", "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link")
network <- opq(bb) %>%
add_osm_feature(key = 'highway', value = 'motorway') %>%
osmdata_sf () %>%
trim_osmdata (tri_cou)
# network <- st_cast(network, "LINESTRING")
mapview(network, zcol= "highway")
# network <- st_cast(network, "LINESTRING")
mapview(network) #, zcol= "highway"
network <- opq(bb) %>%
add_osm_feature(key = 'highway', value = 'motorway') %>%
osmdata_sf () %>%
trim_osmdata (tri_cou)
?osmdata_sf
network <- network$osm_lines
# network <- st_cast(network, "LINESTRING")
mapview(network) #, zcol= "highway"
network <- opq(bb) %>%
add_osm_feature(key = 'highway', value = highway.type) %>%
osmdata_sf () %>%
trim_osmdata (tri_cou)
network <- opq(bb) %>%
add_osm_feature(key = 'highway', value = highway.type)
network <- opq(bb) %>%
add_osm_feature(key = 'highway', value = highway.type) %>%
osmdata_sf ()
network <- network$osm_lines
# network <- st_cast(network, "LINESTRING")
mapview(network) #, zcol= "highway"
##  Import road network from Census
network <- roads(state = "41",county = tri_cou.id)
# network <- st_cast(network, "LINESTRING")
mapview(network) #, zcol= "highway"
library(tidyverse)
library(sf)
library(tigris)
library(dodgr)
library(mapview)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
pdx_bg <- block_groups(state = "41",county = tri_cou.id) # , cb = FALSE, year = 2019
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# https://stackoverflow.com/questions/66867236/r-how-can-i-get-only-ways-from-overpass-api-and-reduce-the-amount-of-data
############## Inputs #########################################################
# I1 Origin
## Import Counties and Census Block Groups.
tri_cou.id <- c('051','067','005') # c("Multnomah or", "Washington or", "Clackamas or")
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
##  Import road network from Census
network <- roads(state = "41",county = tri_cou.id)
st_crs(network)
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
#################################################################
network3 <- oe_get(
place = "us/oregon",
layer = "lines",
provider = "geofabrik",
vectortranslate_options = c(
"-f", "GPKG",
"-overwrite",
"-where", "highway IN ('primary', 'secondary', 'tertiary')",
"-clipsrc", st_as_text(tri_cou),
"-nlt", "PROMOTE_TO_MULTI",
"lines"
)
)
library(osmextract)
library(osmdata)
#################################################################
network3 <- oe_get(
place = "us/oregon",
layer = "lines",
provider = "geofabrik",
vectortranslate_options = c(
"-f", "GPKG",
"-overwrite",
"-where", "highway IN ('primary', 'secondary', 'tertiary')",
"-clipsrc", st_as_text(tri_cou),
"-nlt", "PROMOTE_TO_MULTI",
"lines"
)
)
tm_shape(tri_cou) +
tm_borders(col = "darkred") +
tm_shape(network3) +
tm_lines(lwd = 2)
library(tmap)
tm_shape(tri_cou) +
tm_borders(col = "darkred") +
tm_shape(network3) +
tm_lines(lwd = 2)
tm_shape(tri_cou) +
tm_borders(col = "darkred") +
tm_shape(network3) +
tm_lines(lwd = 1)
?crs
?st_crs
library(tidyverse)
library(sf)
library(dodgr)
library(mapview)
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
## Import Census Block Groups.
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
library(tidyverse)
library(sf)
library(dodgr)
library(mapview)
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
library(tigris)
options(tigris_use_cache = TRUE)
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
## Import Census Block Groups.
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
# Use centroid points
O <- st_coordinates(st_centroid(pdx_bg))
colnames(O) <- c("lon","lat")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
# I2 Destination
## Import shape file of Hospitals
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
D <- Hospital %>% st_transform(crs)
D <- st_coordinates(D) # [,1:2]
colnames(D) <- c("lon","lat")
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
Landslides <- Landslides %>% st_zm(drop = TRUE, what = "ZM")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network <- network %>% st_transform(crs)
# E1 # Breaking the network by disasters
## Defining the buffer distance
buffer <- 100 # unit: feet
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
disaster <- Landslides %>% st_transform(crs)
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
# Use centroid points
O <- st_coordinates(st_centroid(pdx_bg))
colnames(O) <- c("lon","lat")
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
D <- Hospital %>% st_transform(crs)
D <- st_coordinates(D) # [,1:2]
colnames(D) <- c("lon","lat")
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
disaster <- Landslides %>% st_transform(crs)
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network <- network %>% st_transform(crs)
# E1 # Breaking the network by disasters
## Defining the buffer distance
buffer <- 100 # unit: feet
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
# Use centroid points
O <- st_coordinates(st_centroid(pdx_bg))
colnames(O) <- c("lon","lat")
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
D <- Hospital %>% st_transform(crs)
D <- st_coordinates(D) # [,1:2]
colnames(D) <- c("lon","lat")
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
disaster <- Landslides %>% st_zm(drop = TRUE, what = "ZM")
disaster <- disaster %>% st_transform(crs)
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network <- network %>% st_transform(crs)
# E1 # Breaking the network by disasters
## Defining the buffer distance
buffer <- 100 # unit: feet
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
disaster <- disaster %>% st_transform(crs)
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
Landslides <- Landslides %>% st_zm(drop = TRUE, what = "ZM")
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the broken network
network_broken <- network[st_buffer(disaster_nearby, buffer), ]
network <- network %>% mutate(MOTORCODE =
ifelse (LOCALID %in% network_broken$LOCALID, 99, MOTORCODE))
# E2 # Weighting the network
##  Create the weight table
way <- sort(unique (network[["MOTORCODE"]]))
## The full network
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 1) # c (rep(1,length(way)), 1)
wts <- data.frame (name = "custom",
way = way ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID")
network <- st_cast(network, "LINESTRING")
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID")
net <- net[net$component == 1, ]
## The broken network
weights_broken <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, .01)
wts_broken <- data.frame (name = "custom",
way = way ,
value = weights_broken[1:length(way)])
## Weighting network will lose "geometry"
net_broken <- weight_streetnet (network,
wt_profile = wts_broken,
type_col = "MOTORCODE",
id_col = "LOCALID")
net_broken <- net_broken[net_broken$component == 1, ]
# E3 # Calculate all distances
# The OD cost matrix (baseline & scenarios)
odd.matrix <- dodgr_dists (net, from = O, to = D)
odd.matrix_broken <- dodgr_dists (net_broken, from = O, to = D)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>%
mutate_at(c('orig', 'dest'), as.numeric) %>%
arrange(orig,dest)
od.table_broken <- odd.matrix_broken %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>%
mutate_at(c('orig', 'dest'), as.numeric) %>%
arrange(orig,dest)
landslide_to_hospital <- od.table %>%
left_join(od.table_broken,by=c("orig","dest")) %>%
mutate(longer=dist.y-dist.x)
landslide_to_hospital_bg <- pdx_bg
landslide_to_hospital_bg$longer <- landslide_to_hospital$longer
mapview(landslide_to_hospital_bg,zcol="longer") +
mapview(Hospital,cex=1,color="darkred")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the broken network
network_broken <- network[st_buffer(disaster_nearby, buffer), ]
network <- network %>% mutate(MOTORCODE =
ifelse (LOCALID %in% network_broken$LOCALID, 99, MOTORCODE))
## Weighting network will lose "geometry"
network <- st_cast(network, "LINESTRING")
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID")
net <- net[net$component == 1, ]
## Weighting network will lose "geometry"
net_broken <- weight_streetnet (network,
wt_profile = wts_broken,
type_col = "MOTORCODE",
id_col = "LOCALID")
net_broken <- net_broken[net_broken$component == 1, ]
# E3 # Calculate all distances
# The OD cost matrix (baseline & scenarios)
odd.matrix <- dodgr_dists (net, from = O, to = D)
odd.matrix_broken <- dodgr_dists (net_broken, from = O, to = D)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
D <- Hospital %>% st_transform(crs)
D <- st_coordinates(D) # [,1:2]
colnames(D) <- c("lon","lat")
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
# Use centroid points
O <- st_coordinates(st_centroid(pdx_bg))
colnames(O) <- c("lon","lat")
# E3 # Calculate all distances
# The OD cost matrix (baseline & scenarios)
odd.matrix <- dodgr_dists (net, from = O, to = D)
odd.matrix_broken <- dodgr_dists (net_broken, from = O, to = D)
mapview(network, zcol= "MOTORCODE")
View(wts_broken)
View(wts)
net[which(net$d < net$d_weighted/10),c("d","d_weighted")]
net_broken[which(net_broken$d < net_broken$d_weighted/10),c("d","d_weighted")]
tri_cou.id <- c('051','067','005') # Multnomah = "41051", Washington = "41067", Clackamas = "41005";
tri_cou <- counties(state = "41") %>%
dplyr::filter(COUNTYFP %in% tri_cou.id) %>%
st_union()
bb <- st_bbox(tri_cou)
crs <- st_crs(tri_cou)
pdx_bg <- block_groups(state = "41",county = tri_cou.id)
# Use centroid points
O <- st_coordinates(st_centroid(pdx_bg))
colnames(O) <- c("lon","lat")
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
D <- Hospital %>% st_transform(crs)
D <- st_coordinates(D) # [,1:2]
colnames(D) <- c("lon","lat")
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
Landslides <- Landslides %>% st_zm(drop = TRUE, what = "ZM")
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
# E1 # Breaking the network by disasters
## Defining the buffer distance
buffer <- 100 # unit: feet
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the broken network
network_broken <- network[st_buffer(disaster_nearby, buffer), ]
network <- network %>% mutate(MOTORCODE =
ifelse (LOCALID %in% network_broken$LOCALID, 99, MOTORCODE))
# E2 # Weighting the network
##  Create the weight table
way <- sort(unique (network[["MOTORCODE"]]))
## The full network
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 1) # c (rep(1,length(way)), 1)
wts <- data.frame (name = "custom",
way = way ,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
network <- st_cast(network, "LINESTRING")
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID")
net <- net[net$component == 1, ]
## The broken network
weights_broken <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, .01)
wts_broken <- data.frame (name = "custom",
way = way ,
value = weights_broken[1:length(way)])
## Weighting network will lose "geometry"
net_broken <- weight_streetnet (network,
wt_profile = wts_broken,
type_col = "MOTORCODE",
id_col = "LOCALID")
net_broken <- net_broken[net_broken$component == 1, ]
net_broken[which(net_broken$d < net_broken$d_weighted/10),c("d","d_weighted")]
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
# E1 # Breaking the network by disasters
## Defining the buffer distance
buffer <- 100 # unit: feet
## Identify the disaster polygons nearby the road network
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the broken network
network_broken <- network[st_buffer(disaster_nearby, buffer), ]
network <- network %>% mutate(MOTORCODE =
ifelse (LOCALID %in% network_broken$LOCALID, 99, MOTORCODE))
## Weighting network will lose "geometry"
network <- st_cast(network, "LINESTRING")
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID")
net <- net[net$component == 1, ]
## The broken network
weights_broken <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, .01)
wts_broken <- data.frame (name = "custom",
way = way ,
value = weights_broken[1:length(way)])
## Weighting network will lose "geometry"
net_broken <- weight_streetnet (network,
wt_profile = wts_broken,
type_col = "MOTORCODE",
id_col = "LOCALID")
net_broken <- net_broken[net_broken$component == 1, ]
net_broken[which(net_broken$d < net_broken$d_weighted/10),c("d","d_weighted")]
summary(od.table_broken$dist)
