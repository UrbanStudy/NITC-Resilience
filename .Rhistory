bb <- sf::st_bbox(pdx_bg)
dodgr_flowmap (graph_f,bbox = bb , linescale = 5)
bb <- c(-123,45,122,45.5)
dodgr_flowmap (graph_f,bbox = bb , linescale = 5)
bb <- c(-123,45,-122,45.5)
dodgr_flowmap (graph_f,bbox = bb , linescale = 5)
bb <- c(-122.8,45.3,-122.5,45.6)
dodgr_flowmap (graph_f,bbox = bb , linescale = 5)
graph_f_broken <- dodgr_flows_aggregate (net_broken, from = o[23:24,], to = d, flows = 10)
graph_f_broken <- graph_f_broken [graph_f_broken$flow > 0, ]
dodgr_flowmap (graph_f_broken, bbox = bb , linescale = 5)
dp [[23]] [[1]]
dp_broken [[23]] [[1]]
data.frame(
dp [[23]] [[1]],
dp_broken [[23]] [[1]]
)
?data.frame
data.frame(
c(dp [[23]] [[1]], rep(NA,302-275))
dp_broken [[23]] [[1]]
)
data.frame(
c(dp [[23]] [[1]], rep(NA,302-275)),
dp_broken [[23]] [[1]]
)
landslide_to_hospital %>% filter(longer!=0)
graph_f <- dodgr_flows_aggregate (net, from = o[76:774,], to = d, flows = 10)
graph_f <- graph_f [graph_f$flow > 0, ]
bb <- sf::st_bbox(pdx_bg)
bb <- c(-122.8,45.3,-122.5,45.6)
dodgr_flowmap (graph_f, bbox = bb , linescale = 5)
dodgr_flowmap (graph_f, bbox = bb , linescale = 4)
graph_f <- dodgr_flows_aggregate (net, from = o[76:77,], to = d, flows = 10)
graph_f <- graph_f [graph_f$flow > 0, ]
bb <- sf::st_bbox(pdx_bg)
bb <- c(-122.8,45.3,-122.5,45.6)
dodgr_flowmap (graph_f, bbox = bb , linescale = 5)
bb <- c(-122.78,45.45,-122.65,45.55) # c(-122.8,45.3,-122.5,45.6)
dodgr_flowmap (graph_f, bbox = bb , linescale = 5)
bb <- c(-122.78,45.5,-122.67,45.56) # c(-122.8,45.3,-122.5,45.6)
dodgr_flowmap (graph_f, bbox = bb , linescale = 5)
graph_f_broken <- dodgr_flows_aggregate (net_broken, from = o[76:77,], to = d, flows = 10)
graph_f_broken <- graph_f_broken [graph_f_broken$flow > 0, ]
dodgr_flowmap (graph_f_broken, bbox = bb , linescale = 5)
data.frame(
c(dp [[77]] [[1]], rep(NA,302-275)),
dp_broken [[77]] [[1]]
)
data.frame(
c(dp [[77]] [[1]][1:72], rep(NA,302-275),dp [[77]] [[1]][73:275]),
dp_broken [[77]] [[1]]
)
dp [[77]] [[1]][1:72]
dp_broken [[77]] [[1]]
dp [[77]] [[1]]
data.frame(
c(dp [[77]] [[1]][1:71], rep(NA,317-290),dp [[77]] [[1]][72:275]),
dp_broken [[77]] [[1]]
)
data.frame(
c(dp [[77]] [[1]][1:71], rep(NA,317-302),dp [[77]] [[1]][72:275]),
dp_broken [[77]] [[1]]
)
data.frame(
c(dp [[77]] [[1]][1:71], rep(NA,317-302),dp [[77]] [[1]][72:302]),
dp_broken [[77]] [[1]]
)
length(dp [[77]] [[1]])
data.frame(
c(dp [[77]] [[1]][1:71], rep(NA,317-290),dp [[77]] [[1]][72:302]),
dp_broken [[77]] [[1]]
)
data.frame(
c(dp [[77]] [[1]][1:71], rep(NA,317-290),dp [[77]] [[1]][72:290]),
dp_broken [[77]] [[1]]
)
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
## Choose Census crs
crs <- st_crs(pdx_bg)
network <- network %>% st_transform(crs)
# network_broken <- network_broken %>% st_transform(crs)
### From EPSG 6360 to 4269
D_trans <- Hospital %>% st_transform(crs)
### Use centroid points
o <- st_coordinates(st_centroid(pdx_bg))
d <- st_coordinates(D_trans) # [,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
# E3 # Weighting the network ############################
##  Create the weight table
### Ten levels of roads plus a unaccessible level
way <- c(sort(unique (network[["MOTORCODE"]])),99) #
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 0.001) # length=10 # 0.9-0.8 # 0.6-0.4 ##
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
net <- net[net$component == 1, ]
net$highway %>% table()
### Reduce to 110312 obs.
# net <- dodgr_contract_graph (net)  ##### skip this step
### Reduce to 6814 obs.
net[which(net$d > net$d_weighted/10),c("d","d_weighted")]
### Reduce to 110312 obs.
# net <- dodgr_contract_graph (net)  ##### skip this step
### Reduce to 6814 obs.
net[which(net$d < net$d_weighted/10),c("d","d_weighted")]
### Reduce to 110312 obs.
# net <- dodgr_contract_graph (net)  ##### skip this step
### Reduce to 6814 obs.
net[which(net$d < net$d_weighted/5),c("d","d_weighted")]
### Reduce to 110312 obs.
# net <- dodgr_contract_graph (net)  ##### skip this step
### Reduce to 6814 obs.
net[which(net$d < net$d_weighted),c("d","d_weighted")]
wts
network$MOTORCODE[network$LOCALID==id_broken]
network$MOTORCODE[which(network$LOCALID==id_broken)] <-
# E2 # Unify the crs ###################################
## Choose Census crs
crs <- st_crs(pdx_bg)
id_broken
network$LOCALID==id_broken
network$LOCALID
network$MOTORCODE[id_broken]
network$MOTORCODE
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
id_broken
network$MOTORCODE[which(network$LOCALID==id_broken]
network$MOTORCODE[which(network$LOCALID==id_broken)]
network$MOTORCODE
id_broken
network$MOTORCODE[which(network$LOCALID %in% id_broken)]
which(network$LOCALID %in% id_broken)
network$LOCALID %in% id_broken
network$MOTORCODE[network$LOCALID %in% id_broken]
network$LOCALID %in% id_broken
network$MOTORCODE[network$LOCALID %in% id_broken]
network$MOTORCODE[which(network$LOCALID %in% id_broken)]
network$LOCALID %in% id_broken
network$MOTORCODE[network$LOCALID %in% id_broken,]
network[network$LOCALID %in% id_broken,"MOTORCODE"]
network[network$LOCALID =id_broken,"MOTORCODE"]
network[network$LOCALID ==id_broken,"MOTORCODE"]
network$LOCALID %in% id_broken
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network[network$LOCALID %in% id_broken,"MOTORCODE"]
network$LOCALID %in% id_broken
id_broken
network$LOCALID
network$LOCALID %in% id_broken
network$LOCALID == id_broken
network$MOTORCODE
network$MOTORCODE[network$LOCALID == id_broken]
network$MOTORCODE[network$LOCALID %in% id_broken]
network$MOTORCODE[which(network$LOCALID %in% id_broken)]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- 99
net$way_id %in% id_broken
## Choose Census crs
crs <- st_crs(pdx_bg)
network <- network %>% st_transform(crs)
# network_broken <- network_broken %>% st_transform(crs)
### From EPSG 6360 to 4269
D_trans <- Hospital %>% st_transform(crs)
### Use centroid points
o <- st_coordinates(st_centroid(pdx_bg))
d <- st_coordinates(D_trans) # [,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
# E3 # Weighting the network ############################
##  Create the weight table
### Ten levels of roads plus a unaccessible level
way <- c(sort(unique (network[["MOTORCODE"]])),99) #
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 0.001) # length=10 # 0.9-0.8 # 0.6-0.4 ##
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
## Weighting network will lose "geometry"
net <- weight_streetnet (network,
wt_profile = wts,
type_col = "MOTORCODE",
id_col = "LOCALID") #,
net <- net[net$component == 1, ]
### Reduce to 110312 obs.
# net <- dodgr_contract_graph (net)  ##### skip this step
### Reduce to 6814 obs.
net[which(net$d < net$d_weighted/10),c("d","d_weighted")]
# E4 # Calculate all distances ############################
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>%
mutate_at(c('orig', 'dest'), as.numeric) %>%
arrange(orig,dest)
net$way_id %in% id_broken
!net$way_id %in% id_broken
lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
### Select two BG on the edge of Metro
# pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
### Increase from 12868 to 12883 obs.
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
# id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
id_broken <- lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
which(lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))))
!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID %in% id_broken
network$MOTORCODE[network$LOCALID %in% id_broken]
etwork$LOCALID %in% id_broken
network$LOCALID %in% id_broken
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
# id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
id_broken <- !lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[network$LOCALID %in% id_broken]
network$LOCALID %in% id_broken
network$LOCALID %in% id_broken
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
table(id_broken)
knitr::opts_chunk$set(echo = TRUE,message=F,warning = F,cache = T)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,mapview, osmdata, dodgr, bench) # crsuggest,
# remotes::install_github('ropensci/osmdata')
# remotes::install_git("https://git.sr.ht/~mpadge/dodgr")
# remotes::install_bitbucket("atfutures/dodgr")
# remotes::install_gitlab("atfutures1/dodgr")
# remotes::install_github("ATFutures/dodgr")
# install.packages("BiocManager")
# BiocManager::install("graph")
# install.packages("ggm")
# devtools::install_github ("ropensci/osmplotr")
options(scipen=10)
options(digits=6)
# packageVersion ("dodgr")
net <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/original data/pdxstreetnet.Rds")
net$access %>% table()
net$access %>% summary()
net$access %>% table()
mapview(net,zcol="access")
network.df <- network
st_geometry(network.df) <- NULL
network.df$LOCALID %in% id_broken
network.df %>% filter(LOCALID %in% id_broken)
table(id_broken)
mapview(disaster_nearby)
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
network$MOTORCODE %>% table()
mapview(network, zcol="MTORCODE")
mapview(network, zcol="MOTORCODE")
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
mapview(network_broken)
mapview(network_broken) + mapview(disaster_nearby)
?mapview
mapview(network_broken) + mapview(disaster_nearby, color="darkred" )
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network, zcol="MOTORCODE")
!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
## Identify the id of road where are nearby the polygons
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
## Identify the id of road where are nearby the polygons
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID %>% unique()
## Identify the id of road where are nearby the polygons
id_broken <- network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]$LOCALID %>% unique()
network[network$LOCALID %in% id_broken,]
network$MOTORCODE[network$LOCALID %in% id_broken,]
network$MOTORCODE[network$LOCALID %in% id_broken]
network[network$LOCALID %in% id_broken,"MOTORCODE"]
network[network$LOCALID %in% id_broken,c("MOTORCODE")]
network %>% as.data.frame()
network[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), "LOCALID"] %>% unique()
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
id_broken
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network.df <- network %>% as.data.frame()
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID %in% id_broken)
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df
network.df %>% filter(LOCALID %in% id_broken)
id_broken
network.df %>% filter(LOCALID = id_broken)
network.df %>% filter(LOCALID == id_broken)
id_broken
id_broken[1]
network.df %>% filter(LOCALID == id_broken[2])
id_broken[2]
network.df %>% filter(LOCALID %in% id_broken[2])
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
table(id_broken)
network[network$LOCALID %in% id_broken,c("MOTORCODE")]
network[network$LOCALID == "134949",c("MOTORCODE")]
network.df[network.df$LOCALID == "134949",c("MOTORCODE")]
network.df[network.df$LOCALID == "134949",]
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network[network$LOCALID == "134949",]
network.df[network.df$LOCALID == "134949",]
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network.df <- network  %>% as.data.frame()
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network.df[network.df$LOCALID == "134949",]
network[network$LOCALID == "134949",]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
### Select two BG on the edge of Metro
# pdx_bg2 <- pdx_bg %>% filter(GEOID %in% c("410670336003")) # ,"410050241003"
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Hospital <- Hospital %>% filter(NAME=="Providence St. Vincent") # |facilitiy1== "OHSU Complex"
# I3 Disaster
## Import shape file of Landslides,
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
buffer <- 100 # unit: feet
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
### Increase from 12868 to 12883 obs.
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
# mapview(disaster_nearby)
# network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
# mapview(network_broken) + mapview(disaster_nearby, color="darkred" )
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
# network.df <- network # %>% as.data.frame()
# st_geometry(network.df) <- NULL
# network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
# network[network$LOCALID == "134949",]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network, zcol="MOTORCODE")
network$MOTORCODE %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE
mapview(network[network$MOTORCODE=="99",])
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network[network$MOTORCODE=="99",])
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
network$LOCALID <- network$LOCALID %>% as.character()
network <- st_cast(network, "LINESTRING")
############## Evaluate #########################################################
# E1 # Identify the disaster polygons nearby the road network #########
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
## Identify the id of road where are nearby the polygons
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] %>% unique()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))] <- "99"
mapview(network[network$MOTORCODE=="99",])
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
mapview(network,zcol="MOTORCODE")
id_broken <- network$LOCALID[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
id_broken %>% table()
network$MOTORCODE[lengths(st_intersects(network, st_buffer(disaster_nearby, buffer)))]
network$MOTORCODE[network$LOCALID %in% id_broken]
network.df <- network # %>% as.data.frame()
st_geometry(network.df) <- NULL
network.df %>% filter(LOCALID == "134949") #%in% id_broken[2]
network[network$LOCALID == "134949",]
network.df %>% dplyr::filter(LOCALID == "134949") #%in% id_broken[2]
network %>% dplyr::filter(LOCALID == "134949")
network %>% dplyr::filter(LOCALID %in% id_broken)
mapview(network[network$MOTORCODE=="99",])
mapview(network,zcol="MOTORCODE")
