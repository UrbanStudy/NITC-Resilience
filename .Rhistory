#   network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
# }
wts <- data.frame (name = "custom",
way = unique (network_broken[["MOTORCODE"]]),
value = weights)
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, buffer,weights)
network[["MOTORCODE"]]
unique(network[["MOTORCODE"]])
table(network_broken)
table(network$MOTORCODE)
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
disaster_nearby <- st_intersection(Landslides, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
table(network$MOTORCODE)
table(network_broken$MOTORCODE)
# E1 # Assigning the weights (length=9)
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8)
to_hospital <- ODcost(network, pdx_bg, Hospital, buffer,weights)
to_hospital$dist %>% mean()  #  = 34084.37
##  Defining the function
ODcost <- function(network, O, D, Landslides, buffer, weights){
if (class(disaster)=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
wts <- data.frame (name = "custom",
way = unique (network_broken[["MOTORCODE"]]),
value = weights)
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
##
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer,weights)
##  Defining the function
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
wts <- data.frame (name = "custom",
way = unique (network_broken[["MOTORCODE"]]),
value = weights)
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
##
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer,weights)
sort(unique (network_broken[["MOTORCODE"]]))
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8)
buffer <- 100 # unit: feet
##  Defining the function
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, NULL, buffer,weights)
to_hospital$dist %>% mean()  #  = 34084.37
##
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer,weights)
landslide_to_hospital$dist %>% mean()  #  = 34084.37
to_hospital$dist %>% mean()  #  = 21014.6
landslide_to_hospital$dist %>% mean()  #  = 34084.37
source("~/urbanstudy/NITC-Resilience/content/retr/disaster_evaluation.R")
to_hospital$dist %>% mean()  #  = 21014.6
landslide_to_hospital$dist %>% mean()  #  = 34084.37
source("~/urbanstudy/NITC-Resilience/content/retr/disaster_evaluation.R")
?dodgr_flowmap
library(tidyverse)
library(sf)
library(dodgr)
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8) # length=10
buffer <- 100 # unit: feet
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
mapview(landslide_to_hospital)
mapview::mapview(landslide_to_hospital)
mapview::mapview(pdx_bg
)
library(mapview)
mapview(pdx_bg
)
mapview(pdx_bg,z="dist"
)
mapview(pdx_bg,z="ALAND"
)
library(tmap)
tmap_mode("view")
library(tmap)
tm_shape(pdx_bg$ALAND) + tm_polygons()
tm_shape(pdx_bg) + tm_polygons()  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = "ALAND")  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
remotes::install_github("r-spatial/mapview")
p_load(tidyverse, sf, mapview, dodgr) # crsuggest,, bench,igraph, osmdatasf,, sfnetworks
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
# packageVersion ("dodgr")
# remotes::install_github("r-spatial/mapview") #,force = TRUE
##################################################################
# Import simplified retr network.
# net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
# mapview(pdx3cnet.main)
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
?mapview
mapview(breweries)
library(tidyverse)
library(sf)
library(dodgr)
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8) # length=10
buffer <- 100 # unit: feet
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, NULL, buffer, weights)
to_hospital$dist %>% mean()  #  = 21014.6
str(to_hospital)
distinct(to_hospital$orig)
summary(to_hospital$orig)
table(to_hospital$orig)
table(to_hospital$dest)
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
network$MOTORCODE %>% table
class(Landslides)
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)[1]=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, NULL, buffer, weights)
to_hospital$dist %>% mean()  #  = 21014.6
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
landslide_to_hospital$dist %>% mean()  #  = 34084.37
mapview(pdx_bg)
landslide_to_hospital$dist-to_hospital$dist
hist(landslide_to_hospital$dist-to_hospital$dist)
summary(landslide_to_hospital$dist-to_hospital$dist)
pdx_bg %>% left_join(longer=landslide_to_hospital$dist-to_hospital$dist)
# library(tmap)
# tmap_mode("view")
# tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
pdx_bg$longer <- landslide_to_hospital$dist-to_hospital$dist
# library(tmap)
# tmap_mode("view")
# tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
landslide_to_hospital <- landslide_to_hospital %>% left_join(to_hospital,by=c("orig","dest"))
# library(tmap)
# tmap_mode("view")
# tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
landslide_to_hospital <- landslide_to_hospital %>%
left_join(to_hospital,by=c("orig","dest")) %>%
mutate(longer=dist.x-dist.y)
hist(landslide_to_hospital$longer)
summary(landslide_to_hospital$longer)
landslide_to_hospital %>% group_by(orig) %>% summarise(longer)
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% hist()
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% hist(avg.longer)
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% select(avg.longer) %>% hist()
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% select(avg.longer)
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>%
select(avg.longer) %>% as.vector() %>% hist()
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>%
select(avg.longer) %>% as.vector()
(landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))) %>%  hist()
(landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)))$avg.longer %>%  hist()
landslide_to_hospital_bg <- pdx_bg
landslide_to_hospital_bg$longer <- landslide_to_hospital$longer
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% arrange(orig)
landslide_to_hospital$orig
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)[1]=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>%
mutate_at(c('orig', 'dest'), as.numeric) %>%
arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, NULL, buffer, weights)
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
landslide_to_hospital$dist %>% mean()  #  = 34084.37; 33742.85
landslide_to_hospital$orig
to_hospital$orig
# library(tmap)
# tmap_mode("view")
# tm_shape(pdx_bg) + tm_polygons(alpha = 0.5, zindex = pdx_bg$ALAND)  # tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
landslide_to_hospital <- landslide_to_hospital %>%
left_join(to_hospital,by=c("orig","dest")) %>%
mutate(longer=dist.x-dist.y)
hist(landslide_to_hospital$longer)
summary(landslide_to_hospital$longer)
(landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)))$avg.longer %>%  hist()
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))
?summarise
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer),orig)
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer),groups="drop")
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer),.groups="drop")
landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% select(avg.longer)
landslide_to_hospital_bg$avg.longer <- landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer)) %>% select(avg.longer)
?mapview
mapview(landslide_to_hospital_bg,zcol=avg.longer)
landslide_to_hospital_sum <- landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))
landslide_to_hospital_sum$avg.longer %>%  hist()
class(pdx_bg)
landslide_to_hospital_bg <- pdx_bg
landslide_to_hospital_bg$avg.longer <- landslide_to_hospital_sum$avg.longer
mapview(landslide_to_hospital_bg,zcol=avg.longer)
landslide_to_hospital_sum$avg.longer
mapview(landslide_to_hospital_bg,zcol=avg.longer)
mapview(landslide_to_hospital_bg,zcol="avg.longer")
?mapview
mapview(Landslides)
class(Landslides)
mapview(landslide_to_hospital_bg,zcol="avg.longer") +
mapview(Landslides)
library(tmap)
st_cast(Landslides, "POLYGON")
mapview(st_cast(Landslides, "POLYGON") )
mapview(landslide_to_hospital_bg,zcol="avg.longer") +
mapview(Hospital)
gc()
library(tmap)
tmap_mode("view")
tm_shape(Landslides)
Landslides <- st_read( paste0(getwd(),"/Landslides_poly.shp"))
tm_shape(Landslides)
tm_shape(Landslides) + tm_polygons(alpha = 0.5)
tmap_options(check.and.fix = TRUE)
tm_shape(Landslides) + tm_polygons(alpha = 0.5)  #, zindex = pdx_bg$ALAND tm_lines(alpha = 0.5, col = "red" ,lwd=2) #, border.col = 4 ,border.alpha =1
Landslides %>% filter(CONFIDENCE="High")
Landslides %>% filter(CONFIDENCE=="High")
Landslides %>% filter(CONFIDENCE=="High (=>30)")
Landslides <- Landslides %>% filter(CONFIDENCE=="High (=>30)")
tm_shape(Landslides) + tm_polygons(alpha = 0.5)
mapview(Landslides)
############## Inputs #########################################################
# I1 Origin
## Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# I2 Destination
## Import shape file of Hospitals
Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
# I4 Road network:
##  Import shape file of road network
network <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
weights <- c (1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8) # length=10
buffer <- 100 # unit: feet
ODcost <- function(network, O, D, disaster, buffer, weights){
if (class(disaster)[1]=="NULL") {
network_broken <- network
} else {
disaster_nearby <- st_intersection(disaster, st_buffer(network, buffer))
network_broken <- network[!lengths(st_intersects(network, st_buffer(disaster_nearby, buffer))), ]
}
way <- sort(unique (network_broken[["MOTORCODE"]]))
wts <- data.frame (name = "custom",
way = way,
value = weights[1:length(way)])
network_broken$LOCALID <- network_broken$LOCALID %>% as.character()
network_broken <- st_cast(network_broken, "LINESTRING")
crs <- st_crs(O)
network_broken <- network_broken %>% st_transform(crs)
D_trans <- D %>% st_transform(crs)
net <- weight_streetnet (network_broken, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D_trans)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr_dists (net, from = o, to = d)
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>%
mutate_at(c('orig', 'dest'), as.numeric) %>%
arrange(orig,dest)
return((od.table))
}
to_hospital <- ODcost(network, pdx_bg, Hospital, NULL, buffer, weights)
to_hospital$dist %>% mean()  #  = 21014.6
landslide_to_hospital <- ODcost(network, pdx_bg, Hospital, Landslides, buffer, weights)
landslide_to_hospital$dist %>% mean()  #  = 34084.37; 33742.85
landslide_to_hospital <- landslide_to_hospital %>%
left_join(to_hospital,by=c("orig","dest")) %>%
mutate(longer=dist.x-dist.y)
hist(landslide_to_hospital$longer)
summary(landslide_to_hospital$longer)
landslide_to_hospital_sum <- landslide_to_hospital %>% group_by(orig) %>% summarise(avg.longer=mean(longer))
landslide_to_hospital_sum$avg.longer %>%  hist()
landslide_to_hospital_bg <- pdx_bg
landslide_to_hospital_bg$avg.longer <- landslide_to_hospital_sum$avg.longer
mapview(landslide_to_hospital_bg,zcol="avg.longer") +
mapview(Hospital)
