setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
p_load(tidyverse, sf, mapview, dodgr)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
Landslides_nearby1 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, Landslides_nearby)), ]
Landslides_nearby2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_poly, 100))), ]
plot(MotorVehicleSystem_RLIS$geometry, col='black')
plot(Landslides_nearby$geometry, border='green', add=TRUE)
plot(Landslides_nearby1$geometry, lwd=2, col='blue', add=TRUE)
plot(Landslides_nearby2$geometry, lwd=1, col='yellow', add=TRUE)
plot(MotorVehicleSystem_RLIS$geometry, col='black')
# plot(Landslides_nearby$geometry, border='green', add=TRUE)
plot(Landslides_nearby1$geometry, lwd=2, col='blue', add=TRUE)
plot(Landslides_nearby2$geometry, lwd=1, col='yellow', add=TRUE)
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_poly)), ]
rlis_landslide4 <- MotorVehicleSystem_RLIS[lengths(st_disjoint(MotorVehicleSystem_RLIS,Landslides_poly)), ]
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_poly)), ]
rlis_landslide4 <- MotorVehicleSystem_RLIS[lengths(st_disjoint(MotorVehicleSystem_RLIS,Landslides_poly)), ] # same with st_covers
plot(MotorVehicleSystem_RLIS$geometry, col='black')
# plot(Landslides_nearby$geometry, border='green', add=TRUE)
plot(rlis_landslide3$geometry, lwd=2, col='blue', add=TRUE)
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_neaby)), ]  # Nothing removed
# pdx3c_landslide_instersection <- st_intersection(pdx3cnet.main6360, Landslides_poly)
# pdx3c_landslide_difference <- st_difference(pdx3cnet.main6360, Landslides_poly)
# setdiff(pdx3cnet.main6360, pdx3c_landslide_instersection)
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_neaby)), ]  # Nothing removed
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_neaby)), ]  # Nothing removed
rlis_landslide3 <- MotorVehicleSystem_RLIS[!lengths(st_covers(MotorVehicleSystem_RLIS,Landslides_nearby)), ]  # Nothing removed
rlis_landslide4 <- MotorVehicleSystem_RLIS[lengths(st_disjoint(MotorVehicleSystem_RLIS,Landslides_nearby)), ] # Nothing removed
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
rlis_landslide5 <- MotorVehicleSystem_RLIS[!lengths(st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_poly, 100)), ]
rlis_landslide6 <- MotorVehicleSystem_RLIS[!lengths(st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_nearby, 100)), ]
# pdx3c_landslide_instersection <- st_intersection(pdx3cnet.main6360, Landslides_poly)
# pdx3c_landslide_difference <- st_difference(pdx3cnet.main6360, Landslides_poly)
# setdiff(pdx3cnet.main6360, pdx3c_landslide_instersection)
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
rlis_landslide6 <- MotorVehicleSystem_RLIS[!lengths(st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_nearby, 100)), ]
rlis_landslide1 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, Landslides_nearby)), ]
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_poly, 100))), ]
plot(MotorVehicleSystem_RLIS$geometry, col='black')
# plot(Landslides_nearby$geometry, border='green', add=TRUE)
plot(rlis_landslide2$geometry, lwd=2, col='blue', add=TRUE)
plot(rlis_landslide6$geometry, lwd=1, col='yellow', add=TRUE)
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_poly, 100))), ] # 12705
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_nearby, 100))), ] # 12705
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
rlis_landslide8 <- MotorVehicleSystem_RLIS[!lengths(st_crosses(MotorVehicleSystem_RLIS, Landslides_nearby)), ] #
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_nearby, 100))), ] # 12508
plot(MotorVehicleSystem_RLIS$geometry, col='black')
# plot(Landslides_nearby$geometry, border='green', add=TRUE)
plot(rlis_landslide2$geometry, lwd=2, col='blue', add=TRUE)
plot(rlis_landslide8$geometry, lwd=1, col='yellow', add=TRUE)
ggplot() +
geom_sf(data = Landslides_nearby, color = NA, fill = "cyan1") +  #, "black"size = 3
geom_sf(data = rlis_landslide8, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
table(Mrlis_landslide2$MOTORCODE)
table(rlis_landslide2$MOTORCODE)
table(rlis_landslide2$TYPE)
table(rlis_landslide2$FTYPE)
table(pdx3cnet.main$highway)
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
table(pdx3cnet.main$highway)
osm_landslide <- pdx3cnet.main[!lengths(st_intersects(pdx3cnet.main, st_buffer(Landslides_nearby, 100))), ] #
Landslides_nearby4269 <- Landslides_nearby %>% st_transform(st_crs(pdx3cnet.main))
osm_landslide <- pdx3cnet.main[!lengths(st_intersects(pdx3cnet.main, st_buffer(Landslides_nearby4269, 100))), ] #
plot(pdx3cnet.main$geometry, col='black')
plot(osm_landslide$geometry, lwd=1, col='yellow', add=TRUE)
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
Hospital4269 <- Hospital %>% st_transform(st_crs(pdx3cnet.main))
############################################
# Using the road network from OSM
alltohospital_osm_landslide <- breakaleg(osm_landslide, pdx_bg, Hospital4269,NULL)
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
# packageVersion ("dodgr")
# remotes::install_github("r-spatial/mapview",force = TRUE)
##################################################################
# Import simplified retr network.
# net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
# mapview(pdx3cnet.main)
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
# pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
# mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
# select(GEOID,lat,lon)
######################################################################
# library(rgdal)
# shp = "/home/qs26/urbanstudy/NITC-Resilience/content/retr//Motor_RLIS_landslide.shp"
# hospital <- readOGR(dsn=shp,layer =basename(strsplit(shp, "\\.")[[1]])[1])
#############
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
Hospital4269 <- Hospital %>% st_transform(st_crs(pdx3cnet.main))
Landslides_nearby4269 <- Landslides_nearby %>% st_transform(st_crs(pdx3cnet.main))
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
Landslides_nearby4269 <- Landslides_nearby %>% st_transform(st_crs(pdx3cnet.main))
osm_landslide <- pdx3cnet.main[!lengths(st_intersects(pdx3cnet.main, st_buffer(Landslides_nearby4269, 100))), ] # 29135 to 28640
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
alltohospital_osm <- breakaleg(pdx3cnet.main, pdx_bg, Hospital4269,NULL)
alltohospital_osm$dist %>% mean()
############################################
# Using the road network from OSM
alltohospital_osm_landslide <- breakaleg(osm_landslide, pdx_bg, Hospital4269,NULL)
alltohospital_osm_landslide$dist %>% mean()
net <- dodgr::weight_streetnet (rlis_landslide2, type_col = NULL,id_col = "LOCALID")
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_nearby, 100))), ] # 12508
net <- dodgr::weight_streetnet (rlis_landslide2, type_col = NULL,id_col = "LOCALID")
?weight_streetnet
net <- weight_streetnet (hampi)
# os_roads_bristol is also included as an sf data.frame, but in a different
# format requiring identification of columns and specification of custom
# weighting scheme.
colnm <- "formOfWay"
wts <- data.frame (name = "custom",
way = unique (os_roads_bristol [[colnm]]),
value = c (0.1, 0.2, 0.8, 1))
os_roads_bristol
# os_roads_bristol is also included as an sf data.frame, but in a different
# format requiring identification of columns and specification of custom
# weighting scheme.
table(os_roads_bristol$class)
class(net) # data.frame
net <- weight_streetnet (os_roads_bristol, wt_profile = wts,
type_col = colnm, id_col = "identifier")
table(net$highway)
# os_roads_bristol is also included as an sf data.frame, but in a different
# format requiring identification of columns and specification of custom
# weighting scheme.
table(os_roads_bristol$class)
# os_roads_bristol is also included as an sf data.frame, but in a different
# format requiring identification of columns and specification of custom
# weighting scheme.
summary(os_roads_bristol)
class(os_roads_bristol) # data.frame
dim(os_roads_bristol) # 6096  11; 6096 streets
# os_roads_bristol is also included as an sf data.frame, but in a different
# format requiring identification of columns and specification of custom
# weighting scheme.
table(os_roads_bristol$formOfWay)
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
table(rlis_landslide2$MOTORCODE)
ggplot() +
geom_sf(data = rlis_landslide2, color = MOTORCODE )
ggplot() +
geom_sf(data = rlis_landslide2, color = MOTORCODE )
?st_intersection()
plot(rlis_landslide2, col = sf.colors(categorical = TRUE, alpha = .5))
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
table(rlis_landslide2$MOTORCODE)
table(rlis_landslide2$TYPE)
table(rlis_landslide2$FTYPE)
plot(rlis_landslide2$MOTORCODE, col = sf.colors(categorical = TRUE, alpha = .5))
plot(rlis_landslide2$MOTORCODE, col = sf.colors(categorical = TRUE, alpha = .5))
plot(rlis_landslide2$MOTORCODE, col = sf.colors(categorical = TRUE, alpha = .5))
plot(rlis_landslide2$geometry, col = sf.colors(categorical = TRUE, alpha = .5))
?sf.colors
?st_intersects
?st_intersection
?st_covers
?st_disjoint
plot(rlis_landslide2["MOTORCODE"], key.pos = 1, axes = TRUE, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["MOTORCODE"], col = sf.colors(categorical = TRUE, alpha = .5))
plot(st_geometry(rlis_landslide2), col = sf.colors(12, categorical = TRUE), border = 'grey', axes = TRUE)
plot(st_geometry(rlis_landslide2["MOTORCODE"]), col = sf.colors(12, categorical = TRUE), border = 'grey', axes = TRUE)
st_crosses()
?st_crosses()
st_join()
?st_join()
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE ) +  #, "black"size = 3
geom_sf(data = rlis_landslide2, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE )
pdx3cnet.main6360 <- pdx3cnet.main %>% st_transform(st_crs(Landslides_poly))
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE ) +  #, "black"size = 3
# geom_sf(data = pdx3cnet.main6360, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
rlis_landslide2 %>% ggplot() +
geom_sf(aes(fill = MOTORCODE))
rlis_landslide2 %>% ggplot() +
geom_sf(aes(color = MOTORCODE))
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend =T) +  #, "black"size = 3
# geom_sf(data = pdx3cnet.main6360, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend =T)
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend =T) +  #, "black"size = 3
# geom_sf(data = pdx3cnet.main6360, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
table(rlis_landslide2$MOTORCODE)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["MOTORCODE"], col = sf.colors(categorical = TRUE, alpha = .5))
plot(st_geometry(rlis_landslide2["MOTORCODE"]), col = sf.colors(12, categorical = TRUE), border = 'grey', axes = TRUE)
plot(st_geometry(rlis_landslide2), col = sf.colors(12, categorical = TRUE), border = 'grey', axes = TRUE)
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
?legend
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE)
legend(col = rlis_landslide2$MOTORCODE)
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE, key.pos = 4)
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend = "point") +
# geom_sf(data = pdx3cnet.main6360, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend = "line") +
# geom_sf(data = pdx3cnet.main6360, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend = "line") +
geom_sf(data = pdx3cnet.main6360, color = pdx3cnet.main6360$highway, show.legend = "line") +
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = pdx3cnet.main6360, color = pdx3cnet.main6360$highway, show.legend = "line")
pdx3cnet.main6360 %>% ggplot() + geom_sf(aes(color = highway))
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend = "line")
pdx3cnet.main6360 %>% ggplot() + geom_sf(aes(color = highway))
ggplot() +
geom_sf(data = pdx3cnet.main6360, color = pdx3cnet.main6360$highway, show.legend = "line")
rlis_landslide2 %>% ggplot() + geom_sf(aes(color = MOTORCODE))
unique (os_roads_bristol [[colnm]])
unique (rlis_landslide2[[MOTORCODE]])
os_roads_bristol [[colnm]]
os_roads_bristol
unique (rlis_landslide2[["MOTORCODE"]])
wts <- data.frame (name = "custom",
way = unique (rlis_landslide2[["MOTORCODE"]]),
value = c (1, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6, 0.6, 0.6))
net <- dodgr::weight_streetnet (rlis_landslide2, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
wts <- data.frame (name = "custom",
way = unique (rlis_landslide2[["MOTORCODE"]]),
value = c (1, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6, 0.6, 0.6))
net <- dodgr::weight_streetnet (rlis_landslide2, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
rlis_landslide2["MOTORCODE"]
rlis_landslide2$MOTORCODE <- rlis_landslide2$MOTORCODE %>% as.character()
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["MOTORCODE"], col = sf.colors(categorical = TRUE, alpha = .5))
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE, key.pos = 4)
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE, border = 'grey', axes = TRUE, key.pos = 4)
plot(st_geometry(rlis_landslide2), col = sf.colors(12, categorical = TRUE))
ggplot() +
geom_sf(data = rlis_landslide2, color = rlis_landslide2$MOTORCODE, show.legend = "line") +
ggtitle("landslides") +  coord_sf()
ggplot() +
geom_sf(data = pdx3cnet.main6360, color = pdx3cnet.main6360$highway, show.legend = "line")
rlis_landslide2 %>% ggplot() + geom_sf(aes(color = MOTORCODE))
table(rlis_landslide2$TYPE)
table(rlis_landslide2$FTYPE)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(st_geometry(rlis_landslide2),col = rlis_landslide2$MOTORCODE, border = 'grey', axes = TRUE)
plot(rlis_landslide2["MFTYPE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["FTYPE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["FTYPE"], key.pos = 4, axes = F, key.width = lcm(1.0), key.length = 1.0)
plot(rlis_landslide2["FTYPE"], key.pos = 1, axes = F, key.width = lcm(1.0), key.length = 1.0)
plot(rlis_landslide2["FTYPE"], key.pos = 1, axes = F, key.width = lcm(1.0), key.length = 1.0)
plot(rlis_landslide2["FTYPE"], key.pos = 1, axes = F, key.width = lcm(1.0), key.length = 1.0)
plot(rlis_landslide2["FTYPE"] )
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
# packageVersion ("dodgr")
# remotes::install_github("r-spatial/mapview",force = TRUE)
##################################################################
# Import simplified retr network.
# net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
# mapview(pdx3cnet.main)
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
# pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
# mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
# select(GEOID,lat,lon)
######################################################################
# library(rgdal)
# shp = "/home/qs26/urbanstudy/NITC-Resilience/content/retr//Motor_RLIS_landslide.shp"
# hospital <- readOGR(dsn=shp,layer =basename(strsplit(shp, "\\.")[[1]])[1])
#############
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
Landslides_nearby <- st_intersection(Landslides_poly, st_buffer(MotorVehicleSystem_RLIS, 100))
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_poly, 100))), ] # 12508
# rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_poly, 100))), ] # 12508
rlis_landslide2 <- MotorVehicleSystem_RLIS[!lengths(st_intersects(MotorVehicleSystem_RLIS, st_buffer(Landslides_nearby, 100))), ] # 12508
rlis_landslide2$MOTORCODE <- rlis_landslide2$MOTORCODE %>% as.character()
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
plot(rlis_landslide2["MOTORCODE"], key.pos = 4, axes = F, key.width = lcm(1.3), key.length = 1.0)
plot(rlis_landslide2["FTYPE"] )
wts <- data.frame (name = "custom",
way = unique (rlis_landslide2[["MOTORCODE"]]),
value = c (1, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6, 0.6, 0.6))
net <- dodgr::weight_streetnet (rlis_landslide2, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
wts
os_roads_bristol
rlis_landslide2
rlis_landslide2$LOCALID <- rlis_landslide2$LOCALID %>% as.character()
net <- dodgr::weight_streetnet (rlis_landslide2, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
###############################################
# Using the road network from RLIS
# Weight issues
str(rlis_landslide2)
rlis_landslide <- st_cast(rlis_landslide2, "LINESTRING")
net <- dodgr::weight_streetnet (rlis_landslide, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
st_crs(rlis_landslide)
rlis_landslide4269 <- rlis_landslide %>% st_transform(st_crs(pdx3cnet.main))
# Complete network
alltohospital_rlis <- breakaleg(rlis_landslide4269, pdx_bg, Hospital4269,wts)
breakaleg <- function(rlis_network, O, D, wts){
net <- dodgr::weight_streetnet (rlis_netowrk, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
# Complete network
alltohospital_rlis <- breakaleg(rlis_landslide4269, pdx_bg, Hospital4269,wts)
breakaleg <- function(rlis_network, O, D, wts){
net <- dodgr::weight_streetnet (rlis_network, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
# Complete network
alltohospital_rlis <- breakaleg(rlis_landslide4269, pdx_bg, Hospital4269,wts)
alltohospital_rlis$dist %>% mean()   #  = 21750.56
Hospital4269 <- Hospital %>% st_transform(st_crs(pdx3cnet.main))
# Complete network
alltohospital_rlis <- breakaleg(rlis_landslide4269, pdx_bg, Hospital4269,wts)
alltohospital_rlis$dist %>% mean()   #  = 21750.56
rlis_network <- st_cast(MotorVehicleSystem_RLIS, "LINESTRING")
# Complete network
rlis_network4269 <- rlis_network %>% st_transform(st_crs(pdx3cnet.main))
alltohospital_rlis <- breakaleg(rlis_network4269, pdx_bg, Hospital4269,wts)
alltohospital_rlis$dist %>% mean()   #  =
# Broken network by landslide
rlis_landslide4269 <- rlis_landslide %>% st_transform(st_crs(pdx3cnet.main))
alltohospital_rlis_landslide <- breakaleg(rlis_landslide4269, pdx_bg, Hospital4269,wts)
alltohospital_rlis_landslide$dist %>% mean()  #  = 34084.37
wp <- weighting_profiles$weighting_profiles
names (wp)
class (wp)
unique (wp$name)
wp [wp$name == "motorcar", ]
# An example for a generic (non-OSM) highway, represented as the
# `routes_fast` object of the \pkg{stplanr} package, which is a
# SpatialLinesDataFrame.
## Not run:
library (stplanr)
# merge all of the 'routes_fast' lines into a single network
r <- overline (routes_fast, attrib = "length", buff_dist = 1)
routes_fast
# merge all of the 'routes_fast' lines into a single network
r <- overline (routes_fast, attrib = "length", buff_dist = 1)
?weight_streetnet
# merge all of the 'routes_fast' lines into a single network
r <- overline (routes_fast, attrib = "length") #, buff_dist = 1
r <- sf::st_as_sf (r, crs = 4326)
seq (nrow (r))
# We need to specify both a `type` and `id` column for the
# \link{weight_streetnet} function.
r$type <- 1
r$id <- seq (nrow (r))
graph <- weight_streetnet (r, type_col = "type", id_col = "id",
wt_profile = 1)
net <- dodgr::weight_streetnet (rlis_landslide, wt_profile = wts, type_col = "MOTORCODE", id_col = "LOCALID")
