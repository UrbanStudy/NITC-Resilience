if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
st_crs(Hospital)
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
# hospital <- st_read( paste0(getwd(),"/content/retr/Hospital.shp"))
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
# hospital <- st_read( paste0(getwd(),"/content/retr/Hospital.shp"))
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
hospital <- st_read( paste0(getwd(),"/content/retr/Hospital.shp"))
paste0(getwd(),"/content/retr/Hospital.shp")
hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
st_crs(Hospital)
mapview(Hospital)
ggplot() +
geom_sf(data = Hospital, size = 3, color = "black", fill = "cyan1") +
ggtitle("hospital") +
coord_sf()
leaflet(Hospital)
library(leaflet)
leaflet(Hospital)
leaflet(Hospital) %>%
addProviderTiles("CartoDB.Positron")
leaflet(Pop_dens) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(color = "green")
st_geometry_type(Hospital)
st_crs(Hospital)
st_crs(Pop_dens)
leaflet(pdx_bg) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(color = "green")
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
?leaflet
leaflet(pdx_bg) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines()
leaflet(pdx_bg) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(color = "green")  # addPolylines()
mapview(pdx_bg)
st_crs(pdx_bg)
st_crs(Pop_dens)
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
library(tidyverse)
o <- O %>% select(-GEOID)
d <- D %>% select(-GEOID)
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
colnames(odd.matrix) <- D$GEOID
row.names(odd.matrix) <- O$GEOID
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return(mean(od.table$dist))
}
leg.marguambridge <- c("595610338","5528057") # Marquam Bridge #,"5528057"
leg.marguambridge1 <- c("595610338") # Marquam Bridge #,"5528057"
leg.marguambridge2 <- c("5528057")
leg.rossislandbridge <- c("682179096","123374695","587574521","174985371") # Rose Island Bridge #"189307193","542826787",
leg.sellwoodbridge <- c("465285319","923041198","595610339","486837832") # Sellwood Bridge
ohsu <- pdx_df[pdx_df$GEOID=="410510058002",]
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
alltoall_RLIS <- breakaleg(MotorVehicleSystem_RLIS_Eras ,ohsu, pdx_df,NULL)
str(MotorVehicleSystem_RLIS_Eras)
table(MotorVehicleSystem_RLIS_Eras$MOTORCODE)
# packageVersion ("dodgr")
# remotes::install_github("r-spatial/mapview",force = TRUE)
##################################################################
# Import simplified retr network.
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, wt_profile ="motorcar",id_col = "LOCALID")
net <- dodgr::weight_streetnet (pdx3cnet.main, wt_profile ="motorcar",id_col = "osm_id")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, wt_profile ="motorcar",id_col = "LOCALID")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, wt_profile ="MOTORCODE",id_col = "LOCALID")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, wt_profile ="motorcar",id_col = "LOCALID")
?weight_streetnet
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras,id_col = "LOCALID")
table(pdx3cnet.main$highway)
table(MotorVehicleSystem_RLIS_Eras$TYPE)
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, type_col = "MOTORCODE",id_col = "LOCALID")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, type_col = "FTYPE",id_col = "LOCALID")
table(pdx3cnet.main$highway)
table(MotorVehicleSystem_RLIS_Eras$FTYPE)
table(pdx3cnet.main$highway)
alltooshu <- breakaleg(pdx3cnet.main, pdx_df, ohsu,NULL)
ohsu <- pdx_df[pdx_df$GEOID=="410510058002",]
alltooshu_marguambridge <- breakaleg(pdx3cnet.main, pdx_df, ohsu, leg.marguambridge)
alltooshu <- breakaleg(pdx3cnet.main, pdx_df, ohsu,NULL)
oshutoall <- breakaleg(pdx3cnet.main,ohsu, pdx_df,NULL)
oshutoall_marguambridge <- breakaleg(pdx3cnet.main,ohsu, pdx_df, leg.marguambridge)
sf::st_coordinates(Hospital)
sf::st_coordinates(pdx_bg)
st_crs(pdx_bg)
st_crs(Hospital)
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse,sf,sfnetworks, tidygraph, TSP, mapview, osmdata,dbscan,igraph)
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
# pdx.bg <- st_centroid(pdx_bg)
# mapview(pdx_bg); mapview(pdx.bg)
# class(pdx_bg)
pdx_bg <- pdx_bg %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>%
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(-INTPTLAT,-INTPTLON)
pdx.bg <- st_centroid(pdx_bg)
net = as_sfnetwork(MotorVehicleSystem_RLIS, directed = FALSE) %>%
# st_transform(3035) %>%
activate("edges") %>%
mutate(weight = edge_length())
str(MotorVehicleSystem_RLIS)
st_geometry(MotorVehicleSystem_RLIS)
as_sfnetwork(MotorVehicleSystem_RLIS, directed = FALSE)
MotorVehicleSystem_RLIS <- st_read( paste0(getwd(),"/MotorVehicleSystem_RLIS.shp"))
MotorVehicleSystem_RLIS <- st_read( "~/urbanstudy/NITC-Resilience/content/retr/MotorVehicleSystem_RLIS.shp")
st_geometry(MotorVehicleSystem_RLIS)
st_cast(MotorVehicleSystem_RLIS, "LINESTRING")
net_RLIS <- st_cast(MotorVehicleSystem_RLIS, "LINESTRING") # MULTILINESTRING to LINESTRING
net = as_sfnetwork(net_RLIS, directed = FALSE) %>%
# st_transform(3035) %>%
activate("edges") %>%
mutate(weight = edge_length())
# Error: Geometries are not all of type LINESTRING, or all of type POINT
net
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, type_col = "FTYPE",id_col = "LOCALID")
net <- dodgr::weight_streetnet (MotorVehicleSystem_RLIS_Eras, type_col = NULL,id_col = "LOCALID")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
st_geometry_type(Landslides_poly)
st_crs(Landslides_poly)
ggplot() +
geom_sf(data = Hospital, size = 3, color = "black", fill = "cyan1") +
ggtitle("hospital") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, size = 3, color = "black", fill = "cyan1") +
ggtitle("hospital") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, color = "black", fill = "cyan1") +  #, size = 3
ggtitle("landslides") +
coord_sf()
st_crosses(MotorVehicleSystem_RLIS, Landslides_poly, sparse = TRUE, prepared = TRUE, ...)
st_crosses(MotorVehicleSystem_RLIS, Landslides_poly, sparse = TRUE, prepared = TRUE)
st_crosses(MotorVehicleSystem_RLIS, Landslides_poly, sparse = TRUE, prepared = TRUE) %>% table()
rlis_landslide_cross <- st_crosses(MotorVehicleSystem_RLIS, Landslides_poly, sparse = TRUE, prepared = TRUE)
st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_poly, 50, sparse = TRUE, ...)
st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_poly, 50, sparse = TRUE)
rlis_landslide_dist <- st_is_within_distance(MotorVehicleSystem_RLIS, Landslides_poly, 50, sparse = TRUE)
plot(st_geometry(rlis_landslide_cross))
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
# packageVersion ("dodgr")
# remotes::install_github("r-spatial/mapview",force = TRUE)
##################################################################
# Import simplified retr network.
net3cc.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/net3ccmain.Rds")
# summary(net3cc.main$d)
# plot(density(net3cc.main$d))
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
######################################################################
# library(rgdal)
# shp = "/home/qs26/urbanstudy/NITC-Resilience/content/retr//Motor_RLIS_landslide.shp"
# hospital <- readOGR(dsn=shp,layer =basename(strsplit(shp, "\\.")[[1]])[1])
#############
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
pdx_bg6360 <- pdx_bg %>% st_transform(st_crs(Landslides_poly))
pdx3cnet.main6360 <- pdx3cnet.main %>% st_transform(st_crs(Landslides_poly))
sf::st_coordinates(Hospital)
sf::st_coordinates(pdx_bg)
st_geometry(pdx_bg)[[4]][[2]][[1]][1:3,]
st_geometry(pdx_bg)
st_geometry(pdx_bg)[[4]]
st_geometry(pdx_bg)[[4]][[2]]
st_geometry(pdx_bg)[[4]][[1]]
st_geometry(pdx_bg)[[4]][[1]][[1]]
str(pdx_bg6360)
str(Hospital)
st_geometry(Hospital)[[4]][[1]][[1]][1:3,]
st_geometry(Hospital)
st_geometry(Hospital)[[4]]
str(pdx_bg6360)
str(Hospital)
st_geometry(Hospital)[[4]]
st_geometry(Hospital)[[1]]
st_geometry(Hospital)
st_geometry(Hospital)[[2]]
st_geometry(Hospital)[[4]]
st_geometry(pdx_bg)[[4]][[1]][[1]][1:3,]
st_geometry(pdx_bg)[[4]][[1]][1:3,]
st_geometry(pdx_bg)[[4]][[1]][[1]][1:3,]
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
if (!require(pacman)) {install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, mapview, dodgr)
?mapview
mapview(breweries)
######################################################################
# library(rgdal)
# shp = "/home/qs26/urbanstudy/NITC-Resilience/content/retr//Motor_RLIS_landslide.shp"
# hospital <- readOGR(dsn=shp,layer =basename(strsplit(shp, "\\.")[[1]])[1])
#############
setwd("~/urbanstudy/NITC-Resilience/content/retr/")
# Hospital <- st_read( paste0(getwd(),"/Hospital.shp"))
temp = list.files(pattern="*.shp$")
# myfiles = lapply(temp, st_read) # creat a list
# for (i in 1:length(temp)) assign(temp[i], st_read(temp[i])) # same with list2env
list2env(
lapply(setNames(temp, make.names(gsub("*.shp$", "", temp))),
st_read), envir = .GlobalEnv)
rlis_landslide_cross <- st_crosses(MotorVehicleSystem_RLIS, Landslides_poly, sparse = TRUE, prepared = TRUE)
rlis_landslide_instersection <- st_intersection(MotorVehicleSystem_RLIS, Landslides_poly)
pdx3c_landslide_instersection <- st_intersection(pdx3cnet.main6360, Landslides_poly)
## Read the road network with geometry infor
pdx3cnet.main <- readRDS("~/urbanstudy/NITC-Resilience/content/osm/pdx3cnet.main.Rds")
pdx3cnet.main6360 <- pdx3cnet.main %>% st_transform(st_crs(Landslides_poly))
pdx3c_landslide_instersection <- st_intersection(pdx3cnet.main6360, Landslides_poly)
?st_intersection
alltohospital <- breakaleg(pdx3cnet.main, pdx_df, Hospital,NULL)
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
library(tidyverse)
o <- O %>% select(-GEOID)
d <- D %>% select(-GEOID)
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
colnames(odd.matrix) <- D$GEOID
row.names(odd.matrix) <- O$GEOID
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return(mean(od.table$dist))
}
alltohospital <- breakaleg(pdx3cnet.main, pdx_df, Hospital,NULL)
# Import Census Block Groups.
pdx_bg <- readRDS(file = "~/urbanstudy/NITC-Resilience/content/acs/pdx_bg.RDS")
## Select GROID and centroid points
pdx_df <- pdx_bg %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
alltohospital <- breakaleg(pdx3cnet.main, pdx_df, Hospital,NULL)
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
pdx_bg6360 <- pdx_bg %>% st_transform(st_crs(Landslides_poly))
pdx3cnet.main6360 <- pdx3cnet.main %>% st_transform(st_crs(Landslides_poly))
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]]
st_geometry(pdx3cnet.main6360)[[4]][[1]]
st_geometry(pdx3cnet.main6360)[[4]][[2]]
st_geometry(pdx3cnet.main6360)[[4]]
st_geometry(pdx3cnet.main6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]][1:3,]
st_geometry(Hospital)[[4]][1:3,]
st_geometry(Hospital)[[4]][[1]]
st_geometry(Hospital)[[4]][[1]][1:3,]
st_geometry(Hospital)[[4]][[1]]
st_geometry(Hospital)[[4]][1:3,]
st_geometry(Hospital)[[4]]
st_geometry(pdx3cnet.main6360)[[4]][1:3,]
st_geometry(Hospital)[[4]]
st_geometry(Hospital)[1:3,]
st_geometry(Hospital)[[1]][1:3,]
st_geometry(Hospital)[[1]]
st_geometry(Hospital)[[2]][1:3,]
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
st_geometry(pdx3cnet.main6360)[[4]][1:3,]
st_geometry(Hospital)[[2]][1:3,]
st_geometry(Hospital)[[4]]
st_geometry(Hospital)[[4]][1:3,]
st_geometry(Hospital)[[4]]
st_geometry(Hospital)
st_geometry(Hospital)[1:3,]
st_geometry(Hospital)[4]
st_geometry(Hospital)[1:4]
st_geometry(Hospital)
st_geometry(pdx3cnet.main6360)[[4]]
st_geometry(pdx_bg6360)[[4]]
st_geometry(pdx_bg6360)[[4]][[1]]
st_geometry(pdx_bg6360)[[4]][[1]][1:3,]
st_geometry(pdx_bg6360)[[4]][[1]][[1]][1:3,]
st_geometry(Hospital)
st_geometry(Hospital)[[1]]
sf::st_coordinates(Hospital)
sf::st_coordinates(pdx_bg)
sf::st_coordinates(pdx_bg)[1:3,]
sf::st_coordinates(pdx_bg6360)[1:3,]
sf::st_coordinates(pdx3cnet.main6360)[1:3,]
str(Hospital)
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
library(tidyverse)
o <- O
d <- D
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
# colnames(odd.matrix) <- D$GEOID
# row.names(odd.matrix) <- O$GEOID
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_df, Hospital, leg.marguambridge)
leg.marguambridge <- c("595610338","5528057") # Marquam Bridge #,"5528057"
leg.marguambridge1 <- c("595610338") # Marquam Bridge #,"5528057"
leg.marguambridge2 <- c("5528057")
leg.rossislandbridge <- c("682179096","123374695","587574521","174985371") # Rose Island Bridge #"189307193","542826787",
leg.sellwoodbridge <- c("465285319","923041198","595610339","486837832") # Sellwood Bridge
ohsu <- pdx_df[pdx_df$GEOID=="410510058002",]
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_df, Hospital, leg.marguambridge)
net.break <- pdx3cnet.main[!(pdx3cnet.main$osm_id %in%leg.marguambridge),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
odd.matrix <- dodgr::dodgr_dists (net, from = pdx_df, to = Hospital)
pdx_df
pdx_df6360 <- pdx_bg6360 %>% as.data.frame() %>% select(GEOID,INTPTLAT,INTPTLON,-geometry) %>% # as_tibble()
mutate(lat=as.numeric(INTPTLAT),lon=as.numeric(INTPTLON)) %>%
select(GEOID,lat,lon)
odd.matrix <- dodgr::dodgr_dists (net, from = pdx_df6360, to = Hospital)
net.break <- pdx3cnet.main6360[!(pdx3cnet.main6360$osm_id %in%leg.marguambridge),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
odd.matrix <- dodgr::dodgr_dists (net, from = pdx_df6360, to = Hospital)
Hospital
pdx_df6360
st_coordinates(pdx_df6360)
st_coordinates(Hospital)
st_coordinates(pdx.bg6360)
st_coordinates(pdx_bg6360)
odd.matrix <- dodgr::dodgr_dists (net, from = st_coordinates(pdx_bg6360), to = st_coordinates(Hospital))
odd.matrix
st_coordinates(pdx_bg6360)
st_coordinates(pdx_bg6360)[,1:2]
o <- st_coordinates(pdx_bg6360)[,1:2]
d <- st_coordinates(Hospital)[,1:2]
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d)
odd.matrix
pdx_df
o
pdx_df
colnames(o) <- colnames(d) <- c("lon","lat")
View(o)
st_coordinates(pdx_bg6360)[,1:2]
st_centroid(pdx_bg6360)
st_centroid(Hospital)
?dodgr_dists
st_crs(pdx_bg)
st_crs(pdx3cnet.main)
Hospital4269 <- Hospital %>% st_transform(st_crs(pdx3cnet.main))
Landslides_poly4269 <- Landslides_poly %>% st_transform(st_crs(pdx3cnet.main))
Hospital4269
st_coordinates(Hospital4269)[,1:2]
st_coordinates(pdx_bg)
st_centroid(pdx_bg)
st_coordinates(st_centroid(pdx_bg))
o <- st_coordinates(st_centroid(pdx_bg))[,1:2]
d <- st_coordinates(Hospital4269)[,1:2]
d
o
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d)
odd.matrix
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
od.table
st_centroid(pdx_bg)
breakaleg <- function(network, O, D, leg){
net.break <- network[!(network$osm_id %in%leg),]
net <- dodgr::weight_streetnet (net.break, wt_profile ="motorcar",id_col = "osm_id") #
net <- net[net$component == 1, ]
net <- dodgr::dodgr_contract_graph (net)
o <- st_coordinates(st_centroid(O))[,1:2]
d <- st_coordinates(D)[,1:2]
colnames(o) <- colnames(d) <- c("lon","lat")
odd.matrix <- dodgr::dodgr_dists (net, from = o, to = d) #, heap = "Heap23"
# Binary Heap (BHeap),Fibonacci Heap "FHeap", Trinomial Heap (TriHeap), Extended Trinomial Heap (TriHeapExt, and 2-3 Heap (Heap23').
## Convert to long table
od.table <- odd.matrix %>% as_tibble(rownames= "orig") %>%  # rownames= NA include but hide
pivot_longer(!orig, names_to = "dest", values_to = "dist") %>% arrange(orig,dest)
return((od.table))
}
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_df, Hospital, leg.marguambridge)
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_bg, Hospital, leg.marguambridge)
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_bg, Hospital4269, leg.marguambridge)
alltohospital_marguambridge <- breakaleg(pdx3cnet.main6360, pdx_bg, Hospital4269, leg.marguambridge)
?st_centroid
?st_reverse
alltohospital_marguambridge$dist %>% mean()
alltohospital_marguambridge <- breakaleg(pdx3cnet.main, pdx_bg, Hospital4269, leg.marguambridge)
alltohospital_marguambridge$dist %>% mean()
alltohospital <- breakaleg(pdx3cnet.main, pdx_bg, Hospital4269,NULL)
alltohospital$dist %>% mean()
# The unit is km https://atfutures.github.io/dodgr/articles/dodgr.html
## Join Block Group with long OD table
pdx_bg %>% left_join(od.table %>% filter(orig=="410510073001"),by = c("GEOID"="dest")) %>%
mapview(z="dist") #+ mapview(pdx3cnet.main) # PDX airport, 34.7km to Hillsboro airport (41.8km in GoogleMap)
plot(Landslides_poly, col='red')
plot(Landslides_poly$geometry, col='red')
plot(Hospital$geometry, col='red')
plot(Hospital$geometry, col='red')
plot(Landslides_poly$geometry, border='green', add=TRUE)
plot(Hospital$geometry, col='red')
plot(Landslides_poly$geometry, border='green', add=TRUE)
plot(rlis_landslide_instersection, lwd=2, col='blue', add=TRUE)
plot(Hospital$geometry, col='red')
plot(Landslides_poly$geometry, border='green', add=TRUE)
plot(rlis_landslide_instersection$geometry, lwd=2, col='blue', add=TRUE)
ggplot() +
geom_sf(data = Landslides_poly, color = , fill = "cyan1") +  #, "black"size = 3
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, fill = "cyan1") +  #, , color = "black"size = 3
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, color = NULL, fill = "cyan1") +  #, "black"size = 3
ggtitle("landslides") +
coord_sf()
?geom_sf
ggplot() +
geom_sf(data = Landslides_poly, color = "white", fill = "cyan1") +  #, "black"size = 3
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, color = NA, fill = "cyan1") +  #, "black"size = 3
ggtitle("landslides") +
coord_sf()
ggplot() +
geom_sf(data = Landslides_poly, color = NA, fill = "cyan1") +  #, "black"size = 3
geom_sf(data = rlis_landslide_instersection, color = "black", fill = NA) +
ggtitle("landslides") +
coord_sf()
?setdiff()
# rlis_landslide_difference <- st_difference(MotorVehicleSystem_RLIS, Landslides_poly)
# pdx3c_landslide_difference <- st_difference(pdx3cnet.main6360, Landslides_poly)
setdiff(rlis_landslide_instersection, MotorVehicleSystem_RLIS)
setdiff(MotorVehicleSystem_RLIS, rlis_landslide_instersection)
# pdx3c_landslide_difference <- st_difference(pdx3cnet.main6360, Landslides_poly)
setdiff(pdx3cnet.main6360, pdx3c_landslide_instersection)
?st_intersection
